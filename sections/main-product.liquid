{% render 'entry' with '@/styles/sections/product.scss' %}

{% assign sst = section.settings %}
{% assign blocks = section.blocks %}
{% assign features = blocks | where: 'type', 'product_feature' %}
{% assign accordionItems = blocks | where: 'type', 'accordion_item' %}
{% assign specificationItems = blocks | where: 'type', 'specification_item' %}
{% assign productCurrent = product %}
{% assign activeVariant = product.selected_or_first_available_variant %}
{% assign product_badge = product.metafields.custom.badge_product %}
{% assign product_attributes = product.metafields.custom.product_attributes %}

<div
  class="product"
  x-data="product"
  x-init="init"
  {% if template contains 'bambootek' and section.settings.extra_product_for_bambootek %}
  data-extra-product="{{ all_products[section.settings.extra_product_for_bambootek].first_available_variant.id }}"
  data-extra-product-qty="{{ section.settings.extra_product_quantity }}"
  {% endif %}>
  <div class="container !max-w-[1360px]">
    <div class="product__inner !gap-0">
      <div class="main-image-gallery-with-location overflow-auto max-md:mb-[20px] ">
        <div class="custom-gallery">
          {% render 'product-gallery'
            , product: product %}
        </div>
        {% if section.settings.show_store_locator %}
          <div class="custom-pdp-store-locater-desktop">
            <div class="custom-pdp-store-locater">
              {% assign walmartlogo = section.settings.store_main_logo %}
              {% assign storetitle = section.settings.store_main_heading %}
              {% assign storesubtitle = section.settings.store_sub_heading %}
              {% assign rightlogo = section.settings.store_right_logo %}
              {% render 'c-store-locator'
                , title: storetitle
                , text: storesubtitle
                , walmartlogo: walmartlogo
                , rightlogo: rightlogo
              %}
            </div>
          </div>
        {% endif %}
      </div>

      <div class="product__content lg:!pl-[50px] md:!pl-[30px]">
        {% for block in blocks %}
          {% case block.type %}
            {% when 'text_line' %}
              <div class="product__vendor">
                {{ block.settings.text }}
              </div>

            {% when 'title' %}
              <div class="product__title-wrapper mb-[24px]">
                {% if product_badge != blank %}
                  <div class="product__badge font-grotesk font-bold !text-[14px] !leading-[1.2] tracking-[-0.05em] uppercase text-scheme_one bg-scheme_two-tertiary rounded-[24px] p-[10px_10px_6px] inline-block mb-[18px]">
                    {{ product_badge }}
                  </div>
                {% endif %}
                {% if block.settings.image != blank %}
                  <h1 class="product__title-image">
                    <img src="{{ block.settings.image | image_url }}" alt="{{ product.title }}">
                  </h1>
                {% elsif block.settings.alternate_title != blank %}
                  <h1 class="product__title font-grotesk !font-medium !text-[52px] max-md:text-[32px] !leading-[1] !tracking-[-0.05em] text-scheme_one flex flex-wrap gap-[4px] [&_strong]:font-fkroman [&_strong]:font-normal mb-[20px]">
                    {% assign bamboo_icon = settings.bamboo_icon | image_url: width: 100 | image_tag: class: 'w-[2.2rem] md:w-[3.6rem] inline-block translate-y-[-0.6rem] md:translate-y-[-1rem] mx-1'
                    %}
                    {% assign heart_icon = settings.heart_icon | image_url: width: 100 | image_tag: class: 'w-[3rem] md:w-[5rem] inline-block translate-y-[-0.4rem] md:translate-y-[-0.7rem] mx-1'
                    %}
                    {{
                      block.settings.alternate_title | replace: '[bamboo]', bamboo_icon | replace: '[heart]', heart_icon
                    }}
                  </h1>
                {% else %}
                  <h1 class="product__title font-grotesk !font-medium !text-[52px] max-md:!text-[32px] !leading-[1] !tracking-[-0.05em] text-scheme_one mb-[20px]">
                    {{ product.title }}
                  </h1>
                {% endif %}

                <div class="product__rating [&_svg_path]:fill-scheme_one">
                  {% comment %} {% render 'rating-stars', text: section.settings.review_numbers %} {% endcomment %}
                  {% render 'product-rating'
                    , product: product %}
                </div>
              </div>
            {% when 'variant_text' %}
              <div class="variant-text-main"></div>
            {% when 'cta' %}
              <div class="product__cta mb-[50px] max-md:mb-[30px]">
                {% if block.settings.cta_type == 'add_to_cart' %}
                  <div x-show="activeVariant.available">
                    {% form 'product'
                      , product
                      , class: 'product__cta' %}
                      <input
                        type="hidden"
                        name="id"
                        :value="activeVariant.id">
                      <input
                        type="hidden"
                        name="selling_plan"
                        :value="sellingPlan.id">
                      <input
                        type="hidden"
                        name="quantity"
                        value="1">

                      <button class="btn !hidden">
                        {{ block.settings.cta_label }}
                      </button>
                    {% endform %}
                    {% comment %}
                      <span class="button" @click="addToCart(activeVariant.id)">
                      {{ block.settings.cta_label }}
                      <span class="sale-price">
                      {{ product.selected_or_first_available_variant.price | money }}
                      </span>
                      </span>
                    {% endcomment %}
                    <button
                      class="button js-add-to-cart w-full gap-[6px] capitalize"
                      data-selling-plan-id="{{ product.selected_or_first_available_variant.selling_plan_allocations.first.selling_plan.id }}"
                      data-variant-id="{{ product.selected_or_first_available_variant.id }}">
                      {{ block.settings.cta_label }}
                      <span class="text-[8px]">â€¢</span>
                      <span class="sale-price">
                        {{ product.selected_or_first_available_variant.price | money }}
                      </span>
                    </button>
                  </div>

                  <div x-show="!activeVariant.available" x-cloak>
                    <button class="button m-disabled">Out of Stock</button>
                  </div>

                {% else %}
                  <a
                    href="{{ block.settings.cta_url }}"
                    class="btn btn--walmart"
                    target="_blank">
                    {{ block.settings.cta_label }}
                  </a>
                {% endif %}
                {% if block.settings.text != blank %}
                  <div class="bottom-text mt-[12px] [&_ul]:flex [&_ul]:flex-wrap [&_ul]:justify-center [&_ul]:gap-[12px] [&_ul]:max-md:gap-[9px] [&_li]:flex [&_li]:items-center [&_li]:gap-[6px] [&_li]:font-grotesk [&_li]:font-normal [&_li]:text-[14px] [&_li]:max-md:text-[12px] [&_li]:leading-[1.6] [&_li]:text-black-text">
                    {{ block.settings.text }}
                  </div>
                {% endif %}
              </div>

              <div class="custom-pdp-store-locater-mobile"></div>
            {% when 'description' %}
              <div class="product__description">
                <h4 class="mb-6">
                  <strong>About {{ product.title }}</strong>
                </h4>
                <div class="tracking-tighter">
                  {{ product.description | replace: '[title_product]', product.title }}
                </div>
              </div>

            {% when 'product_features' %}
              <div class="product__features grid grid-cols-4 max-[1200px]:grid-cols-2 max-lg:grid-cols-4 max-md:grid-cols-2 gap-x-[8px] gap-y-[40px] mb-[50px]">
                {% for feature in features %}
                  <div class="product__feature flex flex-col items-center gap-[20px]">
                    <div class="product__feature-icon !w-[70px] min-w-[70px] h-[70px] flex items-center justify-center">
                      {% if feature.settings.icon_image != blank %}
                        <img
                          src="{{ feature.settings.icon_image | image_url }}"
                          alt="{{ product.title }}"
                          class="max-w-full max-h-full object-contain">
                      {% else %}
                        {{ feature.settings.icon }}
                      {% endif %}
                    </div>

                    <div class="product__feature-title font-grotesk !font-normal !text-[20px] !leading-[1.3] text-scheme_two text-center">
                      {{ feature.settings.title }}
                    </div>
                  </div>
                {% endfor %}

                {% if block.settings.note != blank %}
                  <div class="product__feature flex items-center gap-4 md:gap-14">
                    <div class="product__feature-icon"></div>
                    <div class="product__feature-note">
                      {{ block.settings.note }}
                    </div>
                  </div>
                {% endif %}
              </div>

            {% when 'separator' %}
              <hr class="product__separator">
            {%- when 'subscription-form' -%}
              {% if product.selling_plan_groups.size > 0 %}
                <div class="subscription-form my-[40px] max-md:my-[30px]">
                  {% render 'selling-plans-integration'
                    , product: product
                    , block: block %}
                </div>
              {% endif %}
            {% when 'tags' %}
              {% if product_attributes.value and template.suffix != blank %}
                <div class="product__tags flex flex-wrap gap-4 mb-4">
                  {% for attribute in product_attributes.value %}
                    <div class="product__tag flex items-center gap-2">
                      {{ attribute }}
                    </div>
                  {% endfor %}
                </div>
              {% else %}
                <div class="product__tags flex flex-wrap gap-4 mb-4">
                  {% for attribute in product_attributes.value %}
                    <div class="product__tag flex items-center gap-2">
                      {{ attribute }}
                    </div>
                  {% endfor %}
                  <div class="product__tag flex items-center gap-2">Free shipping when added to subscription</div>
                </div>
              {% endif %}
            {% comment %}
              {% if product.tags.size > 0 %}
              <div class="product__tags flex flex-wrap gap-4 mb-4">
              {% for tag in product.tags %}
              <div class="product__tag flex items-center gap-2">
              {{ tag }}
              </div>
              {% endfor %}
              </div>
              {% endif %}
            {% endcomment %}
            {% when 'variants' %}
              <div class="product__sizes" x-show="variants.length > 1">
                <div class="title-with-size-chart flex items-center justify-between gap-[20px]">
                  <h4 class="product__sizes-title mb-[14px] font-grotesk !font-medium text-[16px] leading-[1.5] text-black-text flex items-center gap-[8px] !tracking-normal">
                    {{ block.settings.title }}
                    <span class="current-size text-[#7A7A7A]"></span>
                  </h4>
                  {% if product.metafields.custom.size_chart != blank %}
                    <div class="sizeChartBtn font-grotesk font-medium text-[16px] leading-[1.5] underline text-scheme_one cursor-pointer mb-[14px]">
                      Size Chart
                    </div>

                    <div class="sizeChartModal hidden">
                      <div class="container-main fixed top-0 left-0 w-full h-full flex items-center justify-center p-[30px] max-md:p-[20px] bg-black/80 z-[99]">
                        <div class="image-main relative">
                          <button class="closeSizeChart absolute top-[-15px] right-[-15px] w-[30px] h-[30px] flex items-center justify-center bg-scheme_one text-white rounded-full">
                            âœ•
                          </button>
                          {% render 'image-element'
                            , image: product.metafields.custom.size_chart
                            , widths: '100, 200, 300, 375, 550, 750, 1100, 1500, 1780'
                            , sizes: '(max-width: 989px) 100vw, 45vw'
                            , class: 'product-feature-image max-w-full max-h-full h-auto object-contain'
                          %}
                        </div>
                      </div>
                    </div>
                  {% endif %}
                </div>
                <div class="product__sizes-list mb-10 !grid !grid-cols-3 !gap-[8px]">
                  <template x-for="item in variants" x-key="item.id">
                    <label class="product__size">
                      <input
                        type="radio"
                        :checked="item.id === activeVariant.id"
                        name="size"
                        :value="item.id"
                        @change="updateActiveVariant(item.id)">
                      <div class="product__size-content" :data-percent-off="item.compare_at_price > item.price ? percentOff(item.price, item.compare_at_price) : null">
                        <div class="product__size-info" :style="{ backgroundColor: item.id === activeVariant.id ? item.accentTop : 'transparent' }">
                          <div
                            class="product__size-title flex gap-x-[8px]"
                            x-show="item.size"
                            x-text="item.size"
                           x-html="item.size.includes(' / ') 
                            ? item.size.split(' / ').reverse().map(s => `<span class='option-item'>${s}</span>`).join('') 
                            : `<span class='single-option-item block w-full'>${item.size}</span>`"
                          ></div>
                          <div
                            class="product__size-title m-small"
                            x-show="!item.size && item.title"
                            x-html="item.title.replace('/', '<br>')"></div>
                          <div
                            class="product__size-label"
                            x-show="item.type === 'wipes'"
                            x-text="item.size > 1 ? 'packs' : 'pack'"></div>
                          {% if block.settings.show_weight %}
                            <div
                              class="product__size-weight"
                              x-show="item.weight"
                              x-text="item.weight + ' lbs'"></div>
                          {% endif %}
                        </div>
                        <div
                          class="product__size-price hidden"
                          :style="{ backgroundColor: item.id === activeVariant.id ? item.accentBottom : 'transparent' }"
                          x-text="price(item.price)"></div>
                      </div>
                    </label>
                  </template>
                </div>
                {% if section.settings.show_product_details %}
                  <div class="product__diapers mb-4">
                    <span
                      class="product__diapers-diapers"
                      x-show="activeVariant.diapersQty"
                      x-text="'Box Contains: ' + activeVariant.diapersQty + ' Diapers'"></span>
                    <span
                      class="product__diapers-wipes"
                      x-show="activeVariant.wipesQty"
                      x-text="'Pack Contains: ' + activeVariant.wipesQty + ' Wipes'"></span>
                  </div>
                {% endif %}
              </div>

            {% when 'specification' %}
              <div class="multiple-specifications grid grid-cols-2 gap-[10px] max-md:gap-[8px] mb-[50px] max-md:mb-[30px]">
                {% for item in specificationItems %}
                  {% if item.settings.text != blank %}
                    <div class="specification-text flex items-center gap-[6px]">
                      <span class="w-[12px] min-w-[12px] h-[12px] flex items-center justify-center">
                        {{ 'icon-right.svg' | inline_asset_content }}
                      </span>
                      <span class="text font-grotesk font-normal text-[16px] max-md:text-[13px] leading-[1.6] text-black-text">
                        {{- item.settings.text -}}
                      </span>
                    </div>
                  {% endif %}
                {% endfor %}
              </div>

            {% when 'add_on_product' %}
              {% if block.settings.product != blank %}
                {% assign add_on_product = block.settings.product %}
                {% if product.id != add_on_product.id %}
                  <div class="add-on-product mb-[40px] max-md:mb-[30px]">
                    {% if block.settings.heading != blank %}
                      <h2 class="heading font-grotesk !font-medium text-[16px] tracking-normal leading-[1.5] text-black-text mb-[12px]">
                        {{ block.settings.heading }}
                      </h2>
                    {% endif %}
                    <label for="add-on-product-{{ forloop.index }}" class="add-on-label p-[20px_14px] rounded-[12px] border border-solid border-[#E3E3E3] flex">
                      <div class="flex-add-on-details flex items-center gap-[18px] w-full">
                        <div class="add-on-image w-[70px] min-w-[70px] h-[70px] flex items-center justify-center">
                          {%- render 'image-element'
                            , image: add_on_product.featured_image
                            , widths: '50,60,70,80'
                            , sizes: '(max-width: 749px) 100vw, 100vw'
                            , class: 'max-w-full max-h-full object-contain'
                          -%}
                        </div>
                        <div class="add-on-text w-full flex items-center gap-[18px] justify-between">
                          <div class="flex flex-col gap-[4px] w-full">
                            <h2 class="title font-grotesk font-normal text-[16px] max-md:text-[13px] leading-[1.6] text-black-text !tracking-normal">
                              {{ add_on_product.title }}
                            </h2>
                            <p class="price font-grotesk font-medium text-[15px] leading-[1.6] text-black-text">
                              {{ add_on_product.selected_or_first_available_variant.price | money }}
                            </p>
                          </div>

                          <div class="add-on-control cursor-pointer">
                            <input
                              type="checkbox"
                              class="addonproduct"
                              id="add-on-product-{{ forloop.index }}"
                              data-selling-plan-id="{{ add_on_product.selected_or_first_available_variant.selling_plan_allocations.first.selling_plan.id }}"
                              data-variant-id="{{ add_on_product.selected_or_first_available_variant.id }}"
                              data-variant-price="{{ add_on_product.selected_or_first_available_variant.price | money }}">
                            <span class="controls"></span>
                          </div>
                        </div>
                      </div>
                    </label>
                  </div>
                {% endif %}
              {% endif %}
            {% when 'accordion' %}
              <div class="product__accordion">
                {% for item in accordionItems %}
                  <div class="product__accordion-item last:!border-b first:border-t !py-0 !px-[10px]" x-data="{ open: false }">
                    <div
                      class="product__accordion-title py-[16px] font-grotesk !font-medium !text-[18px] !leading-[1.3] text-black-text pr-[34px]"
                      :class="{ 'product__accordion-title--active': open }"
                      @click="open = !open">
                      {{ item.settings.title }}
                    </div>
                    <div class="product__accordion-content !pt-0 !pb-[16px]" x-show="open">
                      {{ item.settings.content }}
                    </div>
                  </div>
                {% endfor %}
              </div>
          {% endcase %}
        {% endfor %}
      </div>
    </div>
  </div>
</div>
<template id="modal-product-info">
  <div>
    <img
      src="{{ sst.size_chart_image | image_url }}"
      alt="Sizing Chart"
      class="aspect-auto h-auto w-full object-cover rounded-regular"
      loading="eager"
      fetchpriority="high"
      decoding="auto">
  </div>
</template>
{% render 'entry' with '@/scripts/sections/main-product.js' %}
<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('product', () => ({
            loading: true,
            activeVariant: null,
            extraProductId: null,
            extraProductQty: null,
            sellingPlan: '',
            mainSwiper: null,
            mainSwiperPagination: null,
            paginationSlides: null,
            activeSlideNum: 0,
            productType: `{{ product.type }}`,
            sizesAccentColorsString: `{{ sst.sizes_accent_colors }}`,
            sizesAccentColors: [],
            templateName: '{{ template |  handleize }}',
            product: {{ productCurrent | json }},
            linkToShowSizeMOdal: false,
            showWeight: true,

            addCheckedAddons() {
              const checkedAddons = document.querySelectorAll('.addonproduct:checked');
              console.log(checkedAddons,"checkedAddons");
              checkedAddons.forEach((addon) => {
                const variantId = addon.getAttribute('data-variant-id');
                 console.log(variantId,"variantId2");
                if (variantId) {
                  console.log('variantId',variantId);
                  Alpine.store('cart').addToCart({
                    variantId: variantId,
                    quantity: 1
                  }, true, false);
                }
              });
            },

            updateSellingPlan(id) {
                this.sellingPlan = this.activeVariant.selling_plan_allocations.find(item => item.id == id);
            },
            parseDiaperInfo(str) {
              const diaperMatch = str.match(/Size (\d+)\s*\(([\d\+\-]+)\s*lbs\)\s*-\s*(\d+)\s*diapers/i);
              const wipeMatch = str.match(/Size (\d+)\s*\((Packs?)\)\s*-\s*(\d+)\s*wipes/i);
              const simpleDiaperMatch = str.match(/Size (\d+)\s*\(([\d\+\-]+)\s*lbs\)/i);
              const simpleWipeMatch = str.match(/Size (\d+)\s*\((Packs?)\)/i);
              const justSizeMatch = str.match(/^(Size )?([a-zA-Z0-9]+)/i);

              if (diaperMatch) {
                return {
                  type: 'diaper',
                  size: parseInt(diaperMatch[1]),
                  weight: diaperMatch[2],
                  weightValue: parseInt(diaperMatch[2].replace('+', '')),
                  diapersQty: parseInt(diaperMatch[3])
                };
              } else if (wipeMatch) {
                return {
                  type: 'wipes',
                  size: parseInt(wipeMatch[1]),
                  wipesQty: parseInt(wipeMatch[3])
                };
              } else if (simpleDiaperMatch) {
                return {
                  type: 'diaper',
                  size: parseInt(simpleDiaperMatch[1]),
                  weight: simpleDiaperMatch[2],
                  weightValue: parseInt(simpleDiaperMatch[2].replace('+', '')),
                };
              } else if (simpleWipeMatch) {
                return {
                  type: 'wipes',
                  size: parseInt(simpleWipeMatch[1])
                };
              } else if (justSizeMatch) {
                return {
                  type: 'basic',
                  sizeLabel: justSizeMatch[2].toUpperCase() // "S", "M", "L", "2", etc.
                };
              } else {
                return null;
              }
            },
            variants: [
                {% for variant in product.variants %}
                    {
                        available: {{ variant.available }},
                        id: {{ variant.id }},
                        title: `{{ variant.title }}`,
                        price: {{ variant.price }},
                        compare_at_price: {{ variant.compare_at_price | default: 0 }},
                        weight: {{ variant.weight | default: 0 }},
                        selling_plan_allocations: [
                            {% for selling_plan_allocation in variant.selling_plan_allocations %}
                                {
                                    price: {{ selling_plan_allocation.price }},
                                    id: {{ selling_plan_allocation.selling_plan.id }},
                                    name: `{{ selling_plan_allocation.selling_plan.name }}`
                                },
                            {% endfor %}
                        ]
                    },
                {% endfor %}
            ],
           updateActiveVariant(id) {
            if (id) {
                  this.activeVariant = this.variants.find(item => item.id == id);
                  console.log('Updated active variant:', this.activeVariant);
                  const mainVariantTitle = this.activeVariant.title;
                  const regex = /Size\s(\d+)\s\(([\w-]+)\)\s-\s(\d+\s\w+)/;
                  const matches = mainVariantTitle.match(regex);

                  if (matches) {
                    const size = matches[1];
                    const count = matches[3];
                    const currentSizeElement = document.querySelector('.current-size');
                    currentSizeElement.innerText = size;

                    const sizeDiv = document.createElement("div");
                    //sizeDiv.textContent = size + ' month supply';
                    sizeDiv.textContent = '1 month supply';
                    sizeDiv.classList.add("month-supply");

                    const countDiv = document.createElement("div");
                    countDiv.textContent = count;
                    countDiv.classList.add("count-main");

                    const variantTextMain = document.querySelector('.variant-text-main');
                    const oldCount = variantTextMain.querySelector('.count-main');
                    const oldSize = variantTextMain.querySelector('.month-supply');

                    if (oldCount) oldCount.remove();
                    if (oldSize) oldSize.remove();

                    variantTextMain.appendChild(countDiv);
                    variantTextMain.appendChild(sizeDiv);

                  }


                  const addToCartBtn = document.querySelector(".js-add-to-cart");
                  addToCartBtn.setAttribute("data-variant-id", this.activeVariant.id);

                  function updateSelectedSize() {
                  const checkedInput = document.querySelector('input[name="size"]:checked');
                  
                  if (!checkedInput) return;

                  const label = checkedInput.closest('label.product__size');
                  if (!label) return;

                  const sizeTitle = label.querySelector('.product__size-title');
                  if (!sizeTitle) return;

                  const firstSpan = sizeTitle.querySelector('span.option-item') || sizeTitle;
                  if (!firstSpan) return;

                  const variantTitle = document.querySelector('.product__sizes .product__sizes-title');
                  if (variantTitle) {
                    variantTitle.textContent ='Select ' + window.optionsName + ' : ' + firstSpan.textContent;
                  }
                  }

                  const sizeRadios = document.querySelectorAll('input[name="size"]');
                  sizeRadios.forEach(radio => {
                  radio.addEventListener('change', updateSelectedSize);
                  });

                  updateSelectedSize();


                  if(document.querySelectorAll('.selling_plan_app_container .selling_plan_theme_integration').length > 0){
                    document.querySelectorAll('.selling_plan_app_container .selling_plan_theme_integration').forEach((section) => {
                      section.classList.add('hidden', 'has-hidden');
                    });
                    document.querySelector(`.selling_plan_app_container .selling_plan_theme_integration[data-variant-id="${this.activeVariant.id}"]`).classList.remove('hidden', 'has-hidden');

                    const variantPrice = document.querySelector(`.selling_plan_theme_integration:not(.has-hidden) [type="radio"]:checked`).dataset.variantPrice;

                    document.querySelector('.product__cta .sale-price').textContent = variantPrice;

                    if (document.querySelector('.current-variant-price')) {
                      document.querySelector('.current-variant-price').textContent = variantPrice;
                    }

                    setTimeout(() => {
                      document.querySelector(`.selling_plan_theme_integration:not(.has-hidden) [type="radio"]:checked`).dispatchEvent(new Event('change'));
                    }, 300);
                  }

                  this.slideToSlideByDataAttribute(this.activeVariant.id);
              } else {
                  this.activeVariant = this.variants[0];
                  const mainVariantTitle = this.activeVariant.title;
                  const regex = /Size\s(\d+)\s\(([\w-]+)\)\s-\s(\d+\s\w+)/;
                  const matches = mainVariantTitle.match(regex);

                  if (matches) {
                    const size = matches[1];
                    const count = matches[3];
                    const currentSizeElement = document.querySelector('.current-size');
                    currentSizeElement.innerText = size;

                    const sizeDiv = document.createElement("div");
                    sizeDiv.textContent = size + ' month supply';
                    sizeDiv.classList.add("month-supply");

                    const countDiv = document.createElement("div");
                    countDiv.textContent = count;
                    countDiv.classList.add("count-main");

                    const variantTextMain = document.querySelector('.variant-text-main');
                    const oldCount = variantTextMain.querySelector('.count-main');
                    const oldSize = variantTextMain.querySelector('.month-supply');

                    if (oldCount) oldCount.remove();
                    if (oldSize) oldSize.remove();

                    variantTextMain.appendChild(countDiv);
                    variantTextMain.appendChild(sizeDiv);
                  }
                  // this.slideToSlideByDataAttribute(this.activeVariant.id);
              }

              function formatMoney(cents, format, currencySymbol = '$') {
                  cents = Number(cents);
                  let value = (cents / 100).toFixed(2);
                  return format.replace('{{amount}}', currencySymbol + value);
              }
              const activeVariantPrice = formatMoney(this.activeVariant.price, "{{amount}}", "$");
              const addToCartPrice = document.querySelector('.product__cta .sale-price');
              if(activeVariantPrice && addToCartPrice){
                addToCartPrice.innerHTML = activeVariantPrice;
              }

              if (this.templateName === 'product-bambootek') {
                const defaultPlan = this.activeVariant?.selling_plan_allocations?.[0];
                if (defaultPlan) {
                  this.sellingPlan = defaultPlan;
                }
              }
            },
            addToCart(variantID, redirect = false) {
              if (!variantID) return;
              if (this.templateName == 'product-bambootek') {
                  const itemsToAdd = [
                    {
                      id: this.activeVariant.id,
                      quantity: 1,
                      ...(this.sellingPlan?.id && { selling_plan: this.sellingPlan.id })
                    }
                  ];
                  if (this.extraProductId) {
                    itemsToAdd.push({
                      id: this.extraProductId,
                      quantity: this.extraProductQty || 4,
                      ...(this.sellingPlan?.id && { selling_plan: this.sellingPlan.id })
                    });
                  }
                  Alpine.store('cart').addMultiplyToCart(itemsToAdd).then(() => {
                    this.addCheckedAddons();
                    if (redirect) {
                      // window.location.href = '/checkout';
                    } else {
                      Alpine.store('cart').toggleCart(true);
                    }
                  });
                } else {
                  Alpine.store('cart').addToCart({
                  variantId: this.activeVariant.id,
                  quantity: 1,
                  sellingPlanId: this.sellingPlan?.id || null
                }, true, redirect).then(() => {
                  this.addCheckedAddons();
              });
              }
            },
            price(price) {
                return `$${(price / 100).toFixed(2)}`;
            },
            percentOff(price, compare_at_price) {
                return `${((compare_at_price - price) / compare_at_price * 100).toFixed(0)}% off`;
            },
            parseSizeColors(input) {
                this.sizesAccentColors = input
                  .trim()
                  .split('\n')
                  .map(line => {
                    const [sizePart, colorPart] = line.split(' - ');
                    const size = sizePart.trim();
                    const [accentTop, accentBottom] = colorPart.split('|').map(c => `#${c.trim()}`);

                    return {
                      size,
                      accentTop,
                      accentBottom
                    };
                  });
            },

            setupVariants() {
              let optionsName = '';
              window.optionsName = '';
              if (this.templateName === 'product') {
                for (let i = 0; i < this.product.options.length; i++) {
                  optionsName += this.product.options[i];
                  if (i < this.product.options.length - 1) {
                    optionsName += ' / ';
                  }
                }
                window.optionsName = optionsName;
              
                this.variants.forEach(variant => {
                  variant.size = variant.title;
                  variant.weight = '123';
                  variant.diapersQty = '345';
                  variant.wipesQty = '567';
                  variant.type = '789';

                  const mainVariantTitle = variant.title;
                  const regex = /Size\s(\d+)\s\(([\w-]+)\)\s-\s(\d+\s\w+)/;
                  const matches = mainVariantTitle.match(regex);
                 
                  if (matches) {
                    const size = matches[1];
                    const weight = matches[2];
                    const count = matches[3];

                    const mainDiv = document.createElement("div");
                    mainDiv.classList.add("main-div");

                    const sizeDiv = document.createElement("div");
                    sizeDiv.textContent = size;
                    sizeDiv.classList.add("size-div");

                    const weightDiv = document.createElement("div");
                    weightDiv.textContent = weight;
                    weightDiv.classList.add("weight-div");

                    const countDiv = document.createElement("div");
                    countDiv.textContent = count;
                    countDiv.classList.add("count-div");

                    mainDiv.appendChild(sizeDiv);
                    mainDiv.appendChild(weightDiv);
                    mainDiv.appendChild(countDiv);

                    variant.size = mainDiv.outerHTML;
                  }

                  variant.accentTop = this.sizesAccentColors.find(item => item.size == variant.size)?.accentTop;
                  variant.accentBottom = this.sizesAccentColors.find(item => item.size == variant.size)?.accentBottom;
                });
              } else {
                this.variants.forEach(variant => {
                  variant.size = Number(this.parseDiaperInfo(variant.title)?.size);
                  variant.weight = this.parseDiaperInfo(variant.title)?.weight;
                  variant.diapersQty = this.parseDiaperInfo(variant.title)?.diapersQty;
                  variant.wipesQty = this.parseDiaperInfo(variant.title)?.wipesQty;
                  variant.type = this.parseDiaperInfo(variant.title)?.type;
                  variant.accentTop = this.sizesAccentColors.find(item => item.size == variant.size)?.accentTop;
                  variant.accentBottom = this.sizesAccentColors.find(item => item.size == variant.size)?.accentBottom;
                });
              }
            },
            updateMainSwiper(swiper) {
                this.mainSwiper = swiper;
            },
            initSwiperMain() {
                const swiper = this.$refs.mainSwiper;
                const swiperMain = new Swiper(swiper, {
                    loop: true,
                    slidesPerView: 1,
                    spaceBetween: 8,
                    // pagination: {
                    //   clickable: true,
                    //   el: this.$refs.mainSwiperPagination,
                    // },
                });
                this.$nextTick(() => {
                  this.updateMainSwiper(swiperMain);
                  this.loading = false;
                });
            },
            initSwiperPagination() {
              const swiper = this.$refs.mainSwiperPagination;
              const swiperPagination = new Swiper(swiper, {
                  // loop: true,
                  direction: "horizontal",
                  slidesPerView: 5.5,
                  spaceBetween: 8,
                  draggable: true,
                  mousewheel: true,
                  breakpoints: {
                      1024: {
                          slidesPerView: 6.7,
                      }
                  }
              });
              this.$nextTick(() => {
                this.mainSwiperPagination = swiperPagination;
              });
            },
            slideToSlide(event, index) {
              this.mainSwiper.slideTo(index);
              this.mainSwiperPagination.slideTo(index);
              this.activeSlideNum = index;
              const variantId = event.target.closest('.swiper-slide')?.getAttribute('data-variant-id');
              if (variantId !== null && variantId !== undefined && variantId !== '') {
                this.activeVariant = this.variants.find(item => item.id == variantId);
              } else {
                console.log("Dont SlideToSlideVARIANT");
              }
            },
            slideToSlideByDataAttribute(dataAttrValue) {
              const slides = this.$refs.mainSwiperPagination.querySelectorAll('.swiper-slide.m-variant');
              const targetSlide = Array.from(slides).find(slide => {
                const variantId = slide.getAttribute('data-variant-id');
                return String(variantId) === String(dataAttrValue);
              });
              if (targetSlide) {
                  const index = parseInt(targetSlide.dataset.index);
                  this.slideToSlide(event, index);
              } else if (slides.length > 0) {
                const activeSlide = Array.from(slides).find(slide => slide.classList.contains('m-active'));
                if (activeSlide) {
                      this.slideToSlide(event, 0);
                  } else {
                      // this.slideToSlide(event, 0);
                  }
              } else {
                console.log("No slides found");
              }
            },

            init() {
                this.linkToShowSizeMOdal = document.querySelector('.product__accordion-content p em');
                this.extraProductId = Number(this.$root.dataset.extraProduct);
                this.extraProductQty = Number(this.$root.dataset.extraProductQty || 1);
                this.paginationSlides = this.$refs.mainSwiperPagination.querySelectorAll('.swiper-slide');
                this.parseSizeColors(this.sizesAccentColorsString);
                this.setupVariants();
                this.loading = true;
                this.updateActiveVariant();
                if (this.templateName === 'product-bambootek') {
                  const defaultPlan = this.activeVariant?.selling_plan_allocations?.[0];
                  if (defaultPlan) {
                    this.sellingPlan = defaultPlan;
                  }
                }
                this.initSwiperMain();
                this.initSwiperPagination();
                // console.log('product', this.product);
                // console.log('product.variants', this.product.variants);
                // console.log('this.variants', this.variants);
                // console.log('this.templateName', this.templateName);

                // Only add event listener if the element exists
                if (this.linkToShowSizeMOdal) {
                  this.linkToShowSizeMOdal.addEventListener('click', (e) => {
                    e.preventDefault();
                    window.Modal.open({
                      title: 'Size and Pack Details',
                      size: 'medium',
                      content: document.querySelector('#modal-product-info')?.innerHTML || 'Dont have content',
                    });
                  });
                }
            }
        }))
    })

    document.addEventListener("DOMContentLoaded", () => {
  const btn = document.querySelector(".sizeChartBtn");
  const modal = document.querySelector(".sizeChartModal");
  const close = document.querySelector(".closeSizeChart");

  if (btn && modal && close) {
    btn.addEventListener("click", () => {
      modal.classList.remove("hidden");
    });
    close.addEventListener("click", () => {
      modal.classList.add("hidden");
    });
    modal.addEventListener("click", (e) => {
      if (e.target === modal) {
        modal.classList.add("hidden");
      }
    });
  }
  });

  document.addEventListener("change", (e) => {
  if (e.target && e.target.classList.contains("addonproduct")) {
    const checkbox = e.target;
    const addonPrice = parseFloat(checkbox.dataset.variantPrice.replace(/[^0-9.]/g, "")) || 0;
    const planPrice = parseFloat(checkbox.dataset.planPrice.replace(/[^0-9.]/g, "")) || 0;
    const priceElement = document.querySelector(".product__cta .sale-price");
    if (checkbox.checked) {
      const newPrice = addonPrice + planPrice;
      priceElement.textContent = `$${newPrice.toFixed(2)}`;
    } else {
      const newPrice = planPrice;
      priceElement.textContent = `$${newPrice.toFixed(2)}`;
    }
  }
  });
  document.addEventListener("DOMContentLoaded", () => {
    function updateSelectedSize() {
      const checkedInput = document.querySelector('input[name="size"]:checked');
      if (!checkedInput) return;

      const label = checkedInput.closest('label.product__size');
      if (!label) return;

      const sizeTitle = label.querySelector('.product__size-title');
      if (!sizeTitle) return;

      const firstSpan = sizeTitle.querySelector('span.option-item') || sizeTitle;
      if (!firstSpan) return;

      const variantTitle = document.querySelector('.product__sizes .product__sizes-title');
      if (variantTitle) {
        variantTitle.textContent = 'Select ' +  window.optionsName + ' : ' + firstSpan.textContent;
      }
      }

      const sizeRadios = document.querySelectorAll('input[name="size"]');
      sizeRadios.forEach(radio => {
      radio.addEventListener('change', updateSelectedSize);
      });

      updateSelectedSize();

  });
</script>
<style></style>

{% schema %}
  {
    "name": "Main Product",
    "settings": [
      {
        "type": "textarea",
        "id": "sizes_accent_colors",
        "label": "Sizes Accent Colors",
        "info": "size - accent_color_top|accent_color_bottom"
      },
      {
        "type": "richtext",
        "id": "review_numbers",
        "label": "How many reviews?"
      },
      {
        "type": "product",
        "id": "extra_product_for_bambootek",
        "label": "Extra Product for Bambootek",
        "info": "This product will be used for the Bambootek template only. It will not be displayed in the product page."
      },
      {
        "type": "number",
        "id": "extra_product_quantity",
        "label": "Extra Product Quantity",
        "default": 4
      }, {
        "type": "image_picker",
        "id": "size_chart_image",
        "label": "Size Chart Image"
      }, {
        "type": "checkbox",
        "id": "show_product_details",
        "label": "Show Product Details",
        "info": "Show the 'Box Contains' and 'Pack Contains' information below variant options",
        "default": true
      }, {
        "type": "header",
        "content": "Store Locator Detail"
      }, {
        "type": "checkbox",
        "id": "show_store_locator",
        "label": "Show Store Locator",
        "default": true
      }, {
        "type": "image_picker",
        "id": "store_main_logo",
        "label": "Main Logo"
      }, {
        "type": "text",
        "id": "store_main_heading",
        "label": "Heading"
      }, {
        "type": "richtext",
        "id": "store_sub_heading",
        "label": "Heading"
      }, {
        "type": "image_picker",
        "id": "store_right_logo",
        "label": "Right Logo"
      }
    ],
    "blocks": [
      {
        "type": "add_on_product",
        "name": "Add On Product",
        "limit": 1,
        "settings": [
          {
            "type": "text",
            "id": "heading",
            "label": "Heading"
          }, {
            "type": "product",
            "id": "product",
            "label": "Product"
          }
        ]
      },
      {
        "type": "specification",
        "name": "Specification",
        "limit": 1
      },
      {
        "type": "specification_item",
        "name": "Specification Item",
        "settings": [
          {
            "type": "text",
            "id": "text",
            "label": "Text"
          }
        ]
      },
      {
        "type": "accordion",
        "name": "Accordion",
        "limit": 1
      }, {
        "type": "accordion_item",
        "name": "Accordion Item",
        "settings": [
          {
            "type": "text",
            "id": "title",
            "label": "Title"
          }, {
            "type": "richtext",
            "id": "content",
            "label": "Content"
          }
        ]
      }, {
        "type": "cta",
        "name": "CTA",
        "limit": 1,
        "settings": [
          {
            "type": "select",
            "id": "cta_type",
            "label": "CTA Type",
            "options": [
              {
                "value": "add_to_cart",
                "label": "Add to Cart"
              }, {
                "value": "external_link",
                "label": "External Link"
              }
            ]
          }, {
            "type": "text",
            "id": "cta_label",
            "label": "CTA Label",
            "default": "Add to Cart"
          }, {
            "type": "url",
            "id": "cta_url",
            "label": "CTA URL"
          }, {
            "type": "richtext",
            "id": "text",
            "label": "Text"
          }
        ]
      }, {
        "type": "description",
        "name": "Description",
        "limit": 1
      }, {
        "type": "variant_text",
        "name": "Variant Text",
        "limit": 1
      }, {
        "type": "product_features",
        "name": "Product Features",
        "limit": 1,
        "settings": [
          {
            "type": "richtext",
            "id": "note",
            "label": "Note"
          }
        ]
      }, {
        "type": "product_feature",
        "name": "Product Feature",
        "settings": [
          {
            "type": "textarea",
            "id": "icon",
            "label": "Icon"
          }, {
            "type": "image_picker",
            "id": "icon_image",
            "label": "Icon Image"
          }, {
            "type": "richtext",
            "id": "title",
            "label": "Text"
          }
        ]
      }, {
        "type": "separator",
        "name": "Separator"
      }, {
        "type": "tags",
        "name": "Tags",
        "limit": 1
      }, {
        "type": "title",
        "name": "Title",
        "limit": 1,
        "settings": [
          {
            "type": "image_picker",
            "id": "image",
            "label": "Alternate Title Image"
          }, {
            "type": "text",
            "id": "alternate_title",
            "label": "Alternate Title"
          }
        ]
      }, {
        "type": "variants",
        "name": "Variants",
        "settings": [
          {
            "type": "text",
            "id": "title",
            "label": "Title"
          }, {
            "type": "textarea",
            "id": "sizes_accent_colors",
            "label": "Sizes Accent Colors",
            "info": "size - accent_color_top|accent_color_bottom"
          }, {
            "type": "checkbox",
            "id": "show_weight",
            "label": "Show Weight",
            "info": "Display the weight information for each variant",
            "default": true
          }
        ],
        "limit": 1
      }, {
        "type": "subscription-form",
        "name": "Subscription Form",
        "limit": 1,
        "settings": [
          {
            "type": "text",
            "id": "free_shipping",
            "label": "Free Shipping text",
            "default": "Free shipping on every order"
          }, {
            "type": "text",
            "id": "cancel_text",
            "label": "Cancellation Text",
            "default": "Modify or cancel any time."
          }, {
            "type": "text",
            "id": "plan_text",
            "label": "Plan text",
            "default": "Delivery"
          }
        ]
      }
    ]
  }
{% endschema %}