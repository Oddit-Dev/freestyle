<div class="product">
    <div class="container">
        <div class="product__gallery">
            <div class="product__gallery-item">
                <img src="{{ productCurrent.images[0].src }}" alt="{{ productCurrent.title }}">
                <div class="product__gallery-item-title">
                    {{ productCurrent.title }}
                </div>
            </div>
        </div>
        <div class="product__content">
            <div class="product__title">
                {{ productCurrent.title }}
            </div>
            <div class="product__price">
                {{ productCurrent.price | money }}
            </div>
        </div>
    </div>
</div>
<script>

  document.addEventListener('alpine:init', () => {

    Alpine.data('product', (sectionId) => ({
      sectionId,
      mainProduct: {{ productCurrent | json }} || {},
      mode: null, // one-time | subscribe
      showSubscription: false,
      discount: 0,
      regularPrice: 0,
      discountedPrice: 0,
      actualPrice: 0,
      isLoading: false,
      sellingPlanGroups: undefined,
      sellingPlanId: null,
      sellingPlansMap: [],
      selectedPlanId: null,
      selectedPlan: {},
      selectedProduct: null,
      quantity: 1,

      init() {
        console.log('Main product INIT:', this.mainProduct);
        if (!this.mainProduct || !this.mainProduct.price) {
          console.error('mainProduct or its price is missing');
          return;
        }

        const tabElement = this.$el.querySelector('.tabs-product-selector');
        this.sellingPlanGroups = this.mainProduct.selling_plan_groups;

        if (this.sellingPlanGroups?.length > 0) {
          const firstGroup = this.sellingPlanGroups[0];
          if (firstGroup?.selling_plans?.length > 0) {
            this.sellingPlanId = firstGroup.app_id;
            this.sellingPlansMap = firstGroup.selling_plans;
            this.selectedPlanId = this.sellingPlansMap[0].id;
            this.selectedPlan = this.sellingPlansMap.find((plan) => plan.id === this.selectedPlanId);
            this.discount = this.selectedPlan.price_adjustments[0].value;
          }
        }

        if (tabElement) {
          this.tab1Selected = JSON.parse(tabElement.getAttribute('data-tab1-selected'));
          this.tab2Selected = JSON.parse(tabElement.getAttribute('data-tab2-selected'));
          this.mode = tabElement.getAttribute('data-tab-selected');
        }

        this.showSubscription = this.mode === 'subscribe';
        this.updateActualPrice();
        this.showSkeletonAndInitSlider();
      },

      showSkeletonAndInitSlider() {
        this.sliderInitialized = false;
        this.sliderLoading = true;

        // Delay for skeleton
        setTimeout(() => {
          this.initSlider();
        }, 100);
      },

      initNewProduct(product) {
        this.mainProduct = product;
        console.log('New product:', this.mainProduct);
        this.init();
        // this.$nextTick(() => {
          // Alpine.initTree(this.$el);
        // });
      },

      initSlider() {
        const swiper = new Swiper('#swiper-container-{{ section.id }}', {
          loop: true,
          navigation: {
            nextEl: '#b-product__gallery-{{ section.id }} .swiper-button-next',
            prevEl: '#b-product__gallery-{{ section.id }} .swiper-button-prev',
          },
          pagination: {
            el: '#swiper-container-{{ section.id }} .swiper-pagination',
            clickable: true,
          },
        });
        this.sliderInitialized = true;
        this.sliderLoading = false;
      },

      formatPrice(price) {
        const formattedPrice = price.toFixed(2);
        return `$${formattedPrice}`;
      },

      watchSelectedPlanId() {
        this.$watch('selectedPlan', (newValue) => {
          console.log('Selected plan changed:', newValue);
          this.updateActualPrice();
        });
      },

      updateActualPrice() {
        this.regularPrice = this.mainProduct.price / 100;

        if (this.mode === 'subscribe' && this.discount > 0) {
          this.discountedPrice = this.regularPrice - (this.regularPrice * this.discount / 100);
          this.actualPrice = this.discountedPrice;
          console.log('this.actualPrice:', this.actualPrice);
        } else {
          this.actualPrice = this.regularPrice;
        }
      },

      switchTab(tab) {
        this.mode = tab;
        this.showSubscription = (tab === 'subscribe');
        this.updateActualPrice();
        console.log('Switched tab this.regularPrice:', this.regularPrice);
      },

      addToCartPDP(quantity) {
        const variantId = this.$el.getAttribute('data-first-variant');
        const product = {
          variantId,
          quantity,
          properties: {},
        };
        if (this.mode === 'subscribe') {
          product.sellingPlanId = this.selectedPlanId;
        }
        Alpine.store('cart').addToCart(product);
        this.quantity = 1;
      },

      loadProduct(productHandle) {
        const url = `/products/${productHandle}?sections=${this.sectionId}`;
        const productUrl = `/products/${productHandle}.js`

        fetch(url)
          .then((response) => {
            if (!response.ok) {
              throw new Error('Network response was not ok');
            }
            console.log('Product details:', response);
            return response.json();
          })
          .then((product) => {
            if (!product[this.sectionId]) {
              console.error('Product section not found');
              return;
            }
            const container = document.createElement('div');
            container.innerHTML = product[this.sectionId];
            const productDetails = container.querySelector('#MainProduct-' + this.sectionId);
            if (this.$refs.productCardRef) {
              this.$refs.productCardRef.replaceWith(productDetails);
            } else {
              console.error('Reference to productCardRef not found');
            }
            return fetch(productUrl);
          })
          .then((response) => {
            if (!response.ok) {
              throw new Error('Failed to fetch product data');
            }
            return response.json();
          })
          .then((productData) => {
            this.$nextTick(() => {
              this.initNewProduct(productData);
            });
            window.history.pushState({ urlPath: productHandle }, '', productHandle);
          })
          .catch((error) => {
            console.error('Error loading product:', error);
          });
      },
    }));

  });
</script>

{% schema %}
{
  "name": "Main Product",
  "tag": "section",
  "class": "section",
  "presets": [
    {
      "name": "Main Product"
    }
  ]
}
{% endschema %}
