{% render 'entry' with '@/styles/sections/product.scss' %}


{% assign sst = section.settings %}
{% assign blocks = section.blocks %}
{% assign features = blocks | where: 'type', 'product_feature' %}
{% assign accordionItems = blocks | where: 'type', 'accordion_item' %}
{% assign productCurrent = product %}
{% assign activeVariant = product.selected_or_first_available_variant %}
{% assign product_badge = product.metafields.custom.badge_product %}

<div class="product" x-data="product">
    <div class="container container-lg">
        <div class="product__inner">
            {% render 'product-gallery', product: product %}

            <div class="product__content flex flex-col gap-8 md:pb-16">
                {% for block in blocks %}
                    {% case block.type %}
                        {% when 'text_line' %}
                            <div class="product__vendor">
                                {{ block.settings.text }}
                            </div>

                        {% when 'title' %}
                            <div class="product__title-wrapper">
                                {% if product_badge != blank %}
                                  <div class="product__badge font-grotesk">
                                      {{ product_badge }}
                                  </div>
                                {% endif %}
                                {% if block.settings.image != blank %}
                                    <h1 class="product__title-image">
                                        <img src="{{ block.settings.image | image_url: width: 600 }}" alt="{{ product.title }}" width="400" height="40">
                                    </h1>
                                {% else %}
                                    <h1 class="product__title">
                                        {{ product.title }}
                                    </h1>
                                {% endif %}

                                <div class="product__rating">
                                    {% render 'rating-stars' %}
                                </div>
                            </div>

                        {% when 'cta' %}
                            <div class="product__cta">
                                {% if block.settings.cta_type == 'add_to_cart' %}
                                    <div x-show="activeVariant.available">
                                        {% form 'product', product, class: 'product__cta' %}
                                        <input type="hidden" name="id" :value="activeVariant.id">
                                        <input type="hidden" name="selling_plan" :value="sellingPlan.id">
                                        <input type="hidden" name="quantity" value="1">

                                        <button class="btn !hidden">
                                          {{ block.settings.cta_label }}
                                        </button>
                                    {% endform %}
                                    <span class="btn" @click="Alpine.store('cart').addToCart({
                                        variantId: activeVariant.id,
                                        quantity: 1,
                                        sellingPlanId: sellingPlan?.id || null
                                        }, true, false)">
                                        {{ block.settings.cta_label }}
                                    </span>
                                </div>

                                <div x-show="!activeVariant.available">
                                    <button class="btn btn--secondary w-full">
                                        Out of Stock
                                    </button>
                                </div>

                            {% else %}
                                <a href="{{ block.settings.cta_url }}" class="btn btn--walmart">
                                    {{ block.settings.cta_label }}
                                </a>
                            {% endif %}
                        </div>

                        {% when 'description' %}
                            <div class="product__description">
                                {{ product.description }}
                            </div>

                        {% when 'product_features' %}
                            <div class="product__features flex flex-col gap-10 md:py-8">
                                {% for feature in features %}
                                    <div class="product__feature flex items-center gap-8 md:gap-14">
                                        <div class="product__feature-icon flex items-center justify-center">
                                            {{ feature.settings.icon }}
                                        </div>
                                        <div class="product__feature-title">
                                            {{ feature.settings.title }}
                                        </div>
                                    </div>
                                {% endfor %}

                                {% if block.settings.note %}
                                    <div class="product__feature flex items-center gap-4 md:gap-14">
                                        <div class="product__feature-icon"></div>
                                        <div class="product__feature-note">
                                            {{ block.settings.note }}
                                        </div>
                                    </div>
                                {% endif %}
                            </div>

                        {% when 'separator' %}
                            <hr class="product__separator">

                        {% when 'tags' %}
                            {% if product.tags.size > 0 %}
                            <div class="product__tags flex flex-wrap gap-4">
                              {% for tag in product.tags %}
                                  <div class="product__tag flex items-center gap-2">
                                      {{ tag }}
                                  </div>
                              {% endfor %}
                            </div>
                            {% endif %}
                        {% when 'variants' %}
                            <div class="product__sizes" x-show="variants.length > 1">
                                <h4 class="product__sizes-title mb-6">{{ block.settings.title }}</h4>

                                <div class="product__sizes-list mb-10">
                                    <template x-for="item in variants" x-key="item.id">
                                        <label class="product__size">
                                          <input
                                            type="radio"
                                            :checked="item.id === activeVariant.id"
                                            name="size"
                                            :value="item.id"
                                            @change="updateActiveVariant(item.id)">
                                          <div
                                          class="product__size-content"
                                          :data-percent-off="item.compare_at_price > item.price ? percentOff(item.price, item.compare_at_price) : null">
                                              <div
                                                class="product__size-info"
                                                :style="{ backgroundColor: item.id === activeVariant.id ? item.accentTop : 'transparent' }">
                                                <div
                                                  class="product__size-title"
                                                  x-text="item.size"></div>
                                                <div
                                                  class="product__size-label"
                                                  x-show="item.type === 'wipes'"
                                                  x-text="item.size > 1 ? 'packs' : item.size + 'pack'"></div>
                                                <div
                                                  class="product__size-weight"
                                                  x-show="item.weight"
                                                  x-text="item.weight + ' lbs'"></div>
                                              </div>
                                              <div
                                              class="product__size-price"
                                              :style="{ backgroundColor: item.id === activeVariant.id ? item.accentBottom : 'transparent' }"
                                              x-text="price(item.price)"></div>
                                          </div>
                                        </label>
                                    </template>
                                </div>
                                <div class="product__diapers">
                                    <span class="product__diapers-diapers" x-show="activeVariant.diapersQty" x-text="'Box Contains: ' + activeVariant.diapersQty + ' Diapers'"></span>
                                    <span class="product__diapers-wipes" x-show="activeVariant.wipesQty" x-text="'Pack Contains: ' + activeVariant.wipesQty + ' Wipes'"></span>
                                </div>
                            </div>

                        {% when 'accordion' %}
                            <div class="product__accordion">
                                {% for item in accordionItems %}
                                    <div class="product__accordion-item" x-data="{ open: false }">
                                        <div class="product__accordion-title" :class="{ 'product__accordion-title--active': open }" @click="open = !open">
                                            {{ item.settings.title }}
                                        </div>
                                        <div class="product__accordion-content" x-show="open">
                                            {{ item.settings.content }}
                                        </div>
                                    </div>
                                {% endfor %}
                            </div>
                    {% endcase %}
                {% endfor %}
            </div>
        </div>
    </div>
</div>
{% render 'entry' with '@/scripts/sections/main-product.js' %}

<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('product', () => ({
            activeVariant: null,
            sellingPlan: '',
            productType: `{{ product.type }}`,
            sizesAccentColorsString: `{{ sst.sizes_accent_colors }}`,
            sizesAccentColors: [],
            templateName: '{{ template |  handleize }}',
            product: {{ productCurrent | json }},
            updateSellingPlan(id) {
                this.sellingPlan = this.activeVariant.selling_plan_allocations.find(item => item.id == id);
            },
            parseDiaperInfo(str) {
              const diaperMatch = str.match(/Size (\d+)\s*\(([\d\+\-]+)\s*lbs\)\s*-\s*(\d+)\s*diapers/i);
              const wipeMatch = str.match(/Size (\d+)\s*\((Packs?)\)\s*-\s*(\d+)\s*wipes/i);
              const simpleDiaperMatch = str.match(/Size (\d+)\s*\(([\d\+\-]+)\s*lbs\)/i);
              const simpleWipeMatch = str.match(/Size (\d+)\s*\((Packs?)\)/i);
              const justSizeMatch = str.match(/^(Size )?([a-zA-Z0-9]+)/i);

              if (diaperMatch) {
                return {
                  type: 'diaper',
                  size: parseInt(diaperMatch[1]),
                  weight: diaperMatch[2],
                  weightValue: parseInt(diaperMatch[2].replace('+', '')),
                  diapersQty: parseInt(diaperMatch[3])
                };
              } else if (wipeMatch) {
                return {
                  type: 'wipes',
                  size: parseInt(wipeMatch[1]),
                  wipesQty: parseInt(wipeMatch[3])
                };
              } else if (simpleDiaperMatch) {
                return {
                  type: 'diaper',
                  size: parseInt(simpleDiaperMatch[1]),
                  weight: simpleDiaperMatch[2],
                  weightValue: parseInt(simpleDiaperMatch[2].replace('+', '')),
                };
              } else if (simpleWipeMatch) {
                return {
                  type: 'wipes',
                  size: parseInt(simpleWipeMatch[1])
                };
              } else if (justSizeMatch) {
                return {
                  type: 'basic',
                  sizeLabel: justSizeMatch[2].toUpperCase() // "S", "M", "L", "2", etc.
                };
              } else {
                return null;
              }
            },
            variants: [
                {% for variant in product.variants %}
                    {
                        available: {{ variant.available }},
                        id: {{ variant.id }},
                        title: `{{ variant.title }}`,
                        price: {{ variant.price }},
                        compare_at_price: {{ variant.compare_at_price | default: 0 }},
                        weight: {{ variant.weight | default: 0 }},
                        selling_plan_allocations: [
                            {% for selling_plan_allocation in variant.selling_plan_allocations %}
                                {
                                    price: {{ selling_plan_allocation.price }},
                                    id: {{ selling_plan_allocation.selling_plan.id }},
                                    name: `{{ selling_plan_allocation.selling_plan.name }}`
                                },
                            {% endfor %}
                        ]
                    },
                {% endfor %}
            ],
            updateActiveVariant(id) {
                if (id) {
                    this.activeVariant = this.variants.find(item => item.id == id);
                } else {
                    this.activeVariant = this.variants[0];
                }
            },
            addToCart(variantID, redirect = false) {
              if (!variantID) return;

              Alpine.store('cart').addToCart({
                variantId: variantID,
                quantity: 1,
                sellingPlanId: this.sellingPlan?.id || null
              }, false, redirect);
            },
            price(price) {
                return `$${(price / 100).toFixed(2)}`;
            },
            percentOff(price, compare_at_price) {
                return `${((compare_at_price - price) / compare_at_price * 100).toFixed(0)}% off`;
            },
            parseSizeColors(input) {
                this.sizesAccentColors = input
                  .trim()
                  .split('\n')
                  .map(line => {
                    const [sizePart, colorPart] = line.split(' - ');
                    const size = sizePart.trim();
                    const [accentTop, accentBottom] = colorPart.split('|').map(c => `#${c.trim()}`);

                    return {
                      size,
                      accentTop,
                      accentBottom
                    };
                  });
            },

            setupVariants() {
              console.log('this.variants', this.variants);
              if (this.templateName === 'product') {
                this.variants.forEach(variant => {
                  variant.size = variant.title;
                  variant.weight = '123';
                  variant.diapersQty = '345';
                  variant.wipesQty = '567';
                  variant.type = '789';
                  variant.accentTop = this.sizesAccentColors.find(item => item.size == variant.size)?.accentTop;
                  variant.accentBottom = this.sizesAccentColors.find(item => item.size == variant.size)?.accentBottom;
                });
              } else {
                this.variants.forEach(variant => {
                  variant.size = Number(this.parseDiaperInfo(variant.title)?.size);
                  variant.weight = this.parseDiaperInfo(variant.title)?.weight;
                  variant.diapersQty = this.parseDiaperInfo(variant.title)?.diapersQty;
                  variant.wipesQty = this.parseDiaperInfo(variant.title)?.wipesQty;
                  variant.type = this.parseDiaperInfo(variant.title)?.type;
                  variant.accentTop = this.sizesAccentColors.find(item => item.size == variant.size)?.accentTop;
                  variant.accentBottom = this.sizesAccentColors.find(item => item.size == variant.size)?.accentBottom;
                });
              }
            },
            init() {
                this.parseSizeColors(this.sizesAccentColorsString);
                this.setupVariants();
                this.updateActiveVariant();
                console.log('product.variants', this.product.variants);
                console.log('this.variants', this.variants);
                console.log('this.templateName', this.templateName);
            }
        }))
    })
</script>

{% schema %}
{
    "name": "Main Product",
    "settings": [
        {
            "type": "textarea",
            "id": "sizes_accent_colors",
            "label": "Sizes Accent Colors",
            "info": "size - accent_color_top|accent_color_bottom"
        }
    ],
    "blocks": [
        {
            "type": "accordion",
            "name": "Accordion",
            "limit": 1
        },
        {
            "type": "accordion_item",
            "name": "Accordion Item",
            "settings": [
                {
                    "type": "text",
                    "id": "title",
                    "label": "Title"
                },
                {
                    "type": "richtext",
                    "id": "content",
                    "label": "Content"
                }
            ]
        },
        {
            "type": "cta",
            "name": "CTA",
            "limit": 1,
            "settings": [
                {
                    "type": "select",
                    "id": "cta_type",
                    "label": "CTA Type",
                    "options": [
                        {
                            "value": "add_to_cart",
                            "label": "Add to Cart"
                        },
                        {
                            "value": "external_link",
                            "label": "External Link"
                        }
                    ]
                },
                {
                    "type": "text",
                    "id": "cta_label",
                    "label": "CTA Label",
                    "default": "Add to Cart"
                },
                {
                    "type": "url",
                    "id": "cta_url",
                    "label": "CTA URL"
                }
            ]
        },
        {
            "type": "description",
            "name": "Description",
            "limit": 1
        },
        {
            "type": "product_features",
            "name": "Product Features",
            "limit": 1,
            "settings": [
                {
                    "type": "richtext",
                    "id": "note",
                    "label": "Note"
                }
            ]
        },
        {
            "type": "product_feature",
            "name": "Product Feature",
            "settings": [
                {
                    "type": "textarea",
                    "id": "icon",
                    "label": "Icon"
                },
                {
                    "type": "richtext",
                    "id": "title",
                    "label": "Text"
                }
            ]
        },
        {
            "type": "separator",
            "name": "Separator"
        },
        {
            "type": "tags",
            "name": "Tags",
            "limit": 1
        },
        {
            "type": "title",
            "name": "Title",
            "limit": 1,
            "settings": [
                {
                    "type": "image_picker",
                    "id": "image",
                    "label": "Alternate Title Image"
                }
            ]
        },
        {
            "type": "variants",
            "name": "Variants",
            "settings": [
                {
                    "type": "text",
                    "id": "title",
                    "label": "Title"
                },
                {
                    "type": "textarea",
                    "id": "sizes_accent_colors",
                    "label": "Sizes Accent Colors",
                    "info": "size - accent_color_top|accent_color_bottom"
                }
            ],
            "limit": 1
        }
    ]
}
{% endschema %}
