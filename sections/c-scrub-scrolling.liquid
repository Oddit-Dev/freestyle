{% render 'entry' with '@/styles/sections/scrub-scrolling.scss' %}

<div class="scrub-scrolling">
  {% if section.settings.button_text != blank %}
    <a href="{{ section.settings.button_url }}" class="button m-main">{{ section.settings.button_text | html }}</a>
  {% endif %}
  {% if section.settings.promo_text != blank %}
    <h3 class="scrub-scrolling__promo font-grotesk text-2xl md:text-5xl">{{ section.settings.promo_text }}</h3>
  {% endif %}
  {% for block in section.blocks %}
    {% case block.type %}
      {% when 'video' %}
        <div class="scrub-scrolling__video">
          <video
              muted
              loop
              playsinline
              preload="true"
              poster="{{ block.settings.poster_image | img_url: 'master' }}"
              data-url-desktop="{{ block.settings.video_url }}"
              data-url-mobile="{{ block.settings.video_url_mobile }}"
          ></video>
          <!-- Preloaded keyframes as images for smoother transitions -->
          <div class="scrub-scrolling__keyframes" style="display: none;">
              {% if block.settings.use_keyframes %}
                  {% for i in (1..block.settings.keyframe_count) %}
                      <img
                          src="{{ block.settings.keyframe_prefix }}{{ i }}.jpg"
                          data-index="{{ i }}"
                          data-total="{{ block.settings.keyframe_count }}"
                          alt="Video keyframe {{ i }}"
                      />
                  {% endfor %}
              {% endif %}
          </div>
        </div>
      {% when 'text' %}
      <style>
          #scrub-scrolling__text-{{ block.id }} {
              padding: {{ block.settings.padding }}px;
              color: {{ block.settings.text_color }};

              {% if block.settings.horizontal_position == 'center' %}
                  text-align: center;
              {% endif %}
          }

          .scrub-scrolling .button span {
            background-image: url({{ section.settings.button_icon | img_url: 'master' }});
          }

          .scrub-scrolling__content .button span {
            background-image: url({{ block.settings.button_icon | img_url: 'master' }});
          }

          @media (max-width: 768px) {
            #scrub-scrolling__text-{{ block.id }} {
              padding: {{ block.settings.padding | divided_by: 2 }}px;
            }
          }
      </style>

      <div class="scrub-scrolling__text font-grotesk flex items-{{ block.settings.text_vertical }} justify-{{ block.settings.horizontal_position }} font-{{ block.settings.font_weight }}" id="scrub-scrolling__text-{{ block.id }}">
        <div class="scrub-scrolling__content">
          <h3 class="font-grotesk text-2xl md:text-5xl font-Inter md:font-medium mb-8">{{ block.settings.title }}</h3>
          <div class="text-lg mb-8">{{ block.settings.text | html }}</div>
          {% if block.settings.button_text != blank %}
              <a href="{{ block.settings.button_url }}" class="button">{{ block.settings.button_text | html }}</a>
          {% endif %}
        </div>
      </div>
    {% endcase %}
  {% endfor %}
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const section = document.querySelector('.scrub-scrolling');
        const videoContainer = section.querySelector('.scrub-scrolling__video');
        const video = videoContainer.querySelector('video');
        const keyframesContainer = section.querySelector('.scrub-scrolling__keyframes');
        const mainBtn = document.querySelector('.button.m-main');
        const useKeyframes = keyframesContainer && keyframesContainer.children.length > 0;

        let keyframes = [];
        let isVideoMode = !useKeyframes;
        let isInView = false;
        let videoLoaded = false;
        let ticking = false;
        let lastTime = performance.now();
        let currentProgress = 0;
        let targetProgress = 0;
        const SMOOTH_FACTOR = 0.1;
        // const SMOOTH_FACTOR = 0.2;
        const FRAME_BUFFER_SIZE = 24;
        let lastFrameTimes = [];
        let lastScrollPosition = 0;
        let scrollVelocity = 0;
        const MAX_SCROLL_VELOCITY = 50;

        function preloadResources() {
            if (useKeyframes) {
                keyframes = Array.from(keyframesContainer.querySelectorAll('img')).sort((a, b) => {
                    return parseInt(a.dataset.index) - parseInt(b.dataset.index);
                });
                video.style.opacity = 0;

                keyframes.forEach(img => {
                    const preloadImg = new Image();
                    preloadImg.src = img.src;
                    img.style.display = 'none';
                });
            } else {
                const isMobile = window.innerWidth <= 768;
                const videoSrc = isMobile ? video.getAttribute("data-url-mobile") : video.getAttribute("data-url-desktop");

                if (videoSrc) {
                    video.src = videoSrc;
                    video.preload = 'auto';
                    video.style.opacity = 1;
                    video.style.display = 'block';
                    video.style.willChange = 'currentTime';
                    video.load();

                    video.addEventListener('loadedmetadata', function() {
                        videoLoaded = true;
                        video.currentTime = 0;
                        if (video.duration) {
                            setTimeout(() => {
                                video.currentTime = video.duration * 0.5;
                                setTimeout(() => video.currentTime = 0, 100);
                            }, 100);
                        }
                    });

                    video.addEventListener('error', function(e) {
                        console.error('Error loading video:', e);
                    });
                }
            }
        }

        function easeInOutQuad(t) {
            return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
        }

        function getScrollProgress() {
            const rect = section.getBoundingClientRect();
            const viewportHeight = window.innerHeight;
            const elementHeight = rect.height;

            // Calculate the point where the animation starts (45% inside the view)
            const startOffset = viewportHeight * 0.45;

            // Calculate the point where the animation ends (10% before exiting the view)
            const endOffset = viewportHeight * 0.60;

            const adjustedTop = rect.top + startOffset;
            const adjustedBottom = rect.bottom - endOffset;

            const scrollRange = viewportHeight + elementHeight - startOffset - endOffset;

            const rawProgress = (viewportHeight - adjustedTop) / scrollRange;
            const progress = Math.min(Math.max(rawProgress, 0), 1);

            return easeInOutQuad(progress);
        }

        function updateScrollVelocity() {
            const currentScroll = window.pageYOffset;
            scrollVelocity = Math.min(
                Math.abs(currentScroll - lastScrollPosition),
                MAX_SCROLL_VELOCITY
            );
            lastScrollPosition = currentScroll;
            return scrollVelocity;
        }

        function getDynamicSmoothFactor() {
            const velocity = updateScrollVelocity() / MAX_SCROLL_VELOCITY;
            return SMOOTH_FACTOR * (1 + velocity * 0.5);
        }

        function smoothValue(newValue) {
            lastFrameTimes.push(newValue);
            if (lastFrameTimes.length > FRAME_BUFFER_SIZE) {
                lastFrameTimes.shift();
            }

            let weightedSum = 0;
            let weightSum = 0;
            lastFrameTimes.forEach((value, index) => {
                const weight = (index + 1) / lastFrameTimes.length;
                weightedSum += value * weight;
                weightSum += weight;
            });

            return weightedSum / weightSum;
        }

        function updateVideo() {
            if (!videoLoaded || !isInView || !video.duration) return;

            const now = performance.now();
            const deltaTime = Math.min((now - lastTime) / 1000, 0.016);
            lastTime = now;

            targetProgress = getScrollProgress();
            const smoothFactor = getDynamicSmoothFactor();
            currentProgress += (targetProgress - currentProgress) * smoothFactor;

            const rawTime = video.duration * currentProgress;
            const smoothTime = smoothValue(rawTime);

            const threshold = 0.008 + (scrollVelocity / MAX_SCROLL_VELOCITY) * 0.004;
            if (Math.abs(video.currentTime - smoothTime) > threshold) {
                video.currentTime = smoothTime;
            }

            if (Math.abs(currentProgress - targetProgress) > 0.0001) {
                requestUpdate();
            }
        }

        function requestUpdate() {
            if (!ticking) {
                requestAnimationFrame(() => {
                    if (isVideoMode && videoLoaded) {
                        updateVideo();
                    }
                    ticking = false;
                });
                ticking = true;
            }
        }

        let scrollTimeout;
        let lastScrollTime = 0;
        const SCROLL_THROTTLE = 1000 / 40;

        window.addEventListener('scroll', function() {
            if (!isInView) return;

            const now = performance.now();
            if (now - lastScrollTime < SCROLL_THROTTLE) return;
            lastScrollTime = now;

            // Show button when scrolling starts
              if (window.pageYOffset > 0 && mainBtn.style.display === 'none') {
                  mainBtn.style.display = 'block';  // Make button visible
              }

            requestUpdate();

            clearTimeout(scrollTimeout);
            scrollTimeout = setTimeout(() => {
                if (window.pageYOffset <= 0) {
                    mainBtn.style.display = 'none';  // Hide button when at the top
                }
                scrollVelocity = 0;
                lastFrameTimes = [];
                targetProgress = getScrollProgress();
                currentProgress = targetProgress;
                requestUpdate();
            }, 100);
        }, { passive: true });

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                isInView = entry.isIntersecting;
                if (isInView && isVideoMode && videoLoaded) {
                    lastTime = performance.now();
                    lastScrollPosition = window.pageYOffset;
                    scrollVelocity = 0;
                    targetProgress = getScrollProgress();
                    currentProgress = targetProgress;
                    lastFrameTimes = [];
                    requestUpdate();
                }
            });
        }, {
            threshold: [0, 0.25, 0.5, 0.75, 1],
            rootMargin: '50px 0px'
        });

        observer.observe(section);
        preloadResources();

        return function cleanup() {
            observer.disconnect();
            window.removeEventListener('scroll', requestUpdate);
            clearTimeout(scrollTimeout);
            lastFrameTimes = [];
        };
    });

</script>
<script>
document.addEventListener('DOMContentLoaded', function () {
    const mainBtn = document.querySelector('.button.m-main');
    const section = document.querySelector('.scrub-scrolling');
    let isFixed = true;

    // Изначально скрываем кнопку
    mainBtn.style.display = 'none';

    function updateButtonPosition() {
        const rect = section.getBoundingClientRect();
        const sectionBottom = rect.bottom;
        const sectionTop = rect.top;

        // Показываем кнопку, когда блок появился на экране
        if (sectionTop <= window.innerHeight && mainBtn.style.display === 'none') {
            mainBtn.style.display = 'block';  // Показываем кнопку
            setTimeout(() => {
              mainBtn.classList.add('m-active');
            }, 300);
        }

        // Если блок прокручен, меняем позицию кнопки
        if (sectionBottom <= window.innerHeight) {
            if (isFixed) {
                mainBtn.style.position = 'absolute';
                mainBtn.style.bottom = '30px';
                isFixed = false;
            }
        } else {
            if (!isFixed) {
                mainBtn.style.position = 'fixed';
                mainBtn.style.bottom = '30px';
                isFixed = true;
            }
        }

        // Скрываем кнопку, если блок вернулся обратно на экран
        if (sectionTop > window.innerHeight) {
            mainBtn.classList.remove('m-active');
            setTimeout(() => {
                    mainBtn.style.display = 'none';
            }, 300);
        }
    }

    window.addEventListener('scroll', function () {
        updateButtonPosition();
    });

    window.addEventListener('resize', function () {
        updateButtonPosition();
    });

    // Начальная проверка, чтобы скрыть кнопку до того, как прокручен блок
    updateButtonPosition();
});

</script>

{% schema %}
{
  "name": "Scrub Scrolling",
  "settings": [
    {
      "type": "checkbox",
      "id": "enable_smooth_scroll",
      "label": "Enable smooth scrolling",
      "default": true,
      "info": "Makes the entire page scroll more smoothly"
    },
    {
      "type": "text",
      "label": "Promo Text",
      "id": "promo_text",
      "default": "Your baby is perfect,now their diaper is too."
    },
    {
      "type": "text",
      "label": "Button text",
      "id": "button_text",
      "default": "Read More"
    },
    {
      "type": "image_picker",
      "label": "Button Icon",
      "id": "button_icon",
    },
    {
      "type": "url",
      "label": "Button URL",
      "id": "button_url"
    }
  ],
  "blocks": [
    {
      "name": "Video",
      "type": "video",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "label": "Video URL (desktop)",
          "id": "video_url"
        },
        {
          "type": "text",
          "label": "Video URL (mobile)",
          "id": "video_url_mobile"
        },
        {
          "type": "image_picker",
          "label": "Poster Image (loading placeholder)",
          "id": "poster_image",
          "info": "Shown while the video is loading"
        },
        {
          "type": "checkbox",
          "id": "use_keyframes",
          "label": "Use keyframe images instead of video",
          "default": false,
          "info": "Often provides smoother scrolling on mobile devices"
        },
        {
          "type": "text",
          "id": "keyframe_prefix",
          "label": "Keyframe image URL prefix",
          "info": "Example: '/assets/keyframe-' if your files are named keyframe-1.jpg, keyframe-2.jpg, etc.",
          "default": "/assets/keyframe-"
        },
        {
          "type": "range",
          "id": "keyframe_count",
          "label": "Number of keyframe images",
          "min": 10,
          "max": 60,
          "step": 5,
          "default": 30,
          "info": "More frames = smoother animation but longer loading time"
        }
      ]
    },
    {
      "name": "Text",
      "type": "text",
      "settings": [
        {
            "type": "range",
            "label": "Padding",
            "id": "padding",
            "min": 40,
            "max": 100,
            "step": 1,
            "default": 40
        },
        {
            "type": "select",
            "label": "Text vertical position",
            "id": "text_vertical",
            "options": [
                {
                    "value": "start",
                    "label": "Top"
                },
                {
                    "value": "center",
                    "label": "Center"
                },
                {
                    "value": "end",
                    "label": "Bottom"
                }
            ]
        },
        {
            "type": "select",
            "label": "Text horizontal position",
            "id": "horizontal_position",
            "options": [
                {
                    "value": "start",
                    "label": "Left"
                },
                {
                    "value": "center",
                    "label": "Center"
                },
                {
                    "value": "end",
                    "label": "Right"
                }
            ]
        },
        {
            "type": "color",
            "label": "Text color",
            "id": "text_color",
            "default": "#020617"
        },
        {
            "type": "text",
            "label": "Title",
            "id": "title"
        },
        {
            "type": "richtext",
            "label": "Text",
            "id": "text"
        },
        {
            "type": "text",
            "label": "Button text",
            "id": "button_text",
            "default": "Read More"
        },
        {
            "type": "image_picker",
            "label": "Button Icon",
            "id": "button_icon",
        },
        {
            "type": "url",
            "label": "Button URL",
            "id": "button_url"
        }
    ]
    }
  ],
  "presets": [
    {
      "name": "Scrub Scrolling"
    }
  ]
}
{% endschema %}