{% render 'entry' with '@/styles/sections/scrub-scrolling.scss' %}

<style>
  .scrub-scrolling {
    position: relative;
    height: 100vh;
    overflow: hidden;
  }
  
  .scrub-scrolling__container {
    position: sticky;
    top: 0;
    left: 0;
    width: 100%;
    height: 100vh;
    overflow: hidden;
  }
  
  .scrub-scrolling__video {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
  }
  
  .scrub-scrolling__video canvas {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .scrub-scrolling__text {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 2;
    pointer-events: none;
  }
  
  .scrub-scrolling__content {
    pointer-events: auto;
  }
  
  .scrub-scrolling__progress {
    position: fixed;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    width: 50%;
    height: 4px;
    background: rgba(255, 255, 255, 0.3);
    border-radius: 2px;
    z-index: 10;
  }
  
  .scrub-scrolling__progress-bar {
    height: 100%;
    width: 0;
    background: white;
    border-radius: 2px;
    transition: width 0.1s;
  }
  
  .scrub-scrolling__spacer {
    height: calc(100vh * {{ section.settings.scroll_multiplier | default: 3 }});
  }
</style>

<div class="scrub-scrolling">
  <div class="scrub-scrolling__container">
    {% for block in section.blocks %}
      {% case block.type %}
        {% when 'video' %}
          <div class="scrub-scrolling__video">
            <canvas id="video-canvas"></canvas>
            <video 
              id="source-video"
              muted 
              loop 
              playsinline
              preload="auto"
              poster="{{ block.settings.poster_image | img_url: 'master' }}"
              src="{{ block.settings.video_url }}"
              style="display: none;"
            ></video>
          </div>
        {% when 'text' %}
          <style>
            #scrub-scrolling__text-{{ block.id }} {
              padding: {{ block.settings.padding }}px;
              color: {{ block.settings.text_color }};

              {% if block.settings.horizontal_position == 'center' %}
                text-align: center;
              {% endif %}
            }

            @media (max-width: 768px) {
              #scrub-scrolling__text-{{ block.id }} {
                padding: {{ block.settings.padding | divided_by: 2 }}px;
              }
            }
          </style>

          <div class="scrub-scrolling__text font-grotesk flex items-{{ block.settings.text_vertical }} justify-{{ block.settings.horizontal_position }} font-{{ block.settings.font_weight }}" id="scrub-scrolling__text-{{ block.id }}">
            <div class="scrub-scrolling__content">
              <h3 class="font-grotesk text-2xl md:text-5xl font-Inter md:font-medium mb-8">{{ block.settings.title }}</h3>
              <div class="text-lg mb-8">{{ block.settings.text }}</div>
              {% if block.settings.button_text != blank %}
                <a href="{{ block.settings.button_url }}" class="button">{{ block.settings.button_text }}</a>
              {% endif %}
            </div>
          </div>
      {% endcase %}
    {% endfor %}
    
    {% if section.settings.show_progress_bar %}
      <div class="scrub-scrolling__progress">
        <div class="scrub-scrolling__progress-bar" id="progress-bar"></div>
      </div>
    {% endif %}
  </div>
  
  <!-- This creates the scrollable space -->
  <div class="scrub-scrolling__spacer"></div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const section = document.querySelector('.scrub-scrolling');
    const video = document.getElementById('source-video');
    const canvas = document.getElementById('video-canvas');
    const ctx = canvas.getContext('2d');
    const progressBar = document.getElementById('progress-bar');
    
    let frameCount = 0;
    let currentFrame = 0;
    let frames = [];
    let isVideoLoaded = false;
    let isExtracting = false;
    
    // Set canvas dimensions to match the video once metadata is loaded
    video.addEventListener('loadedmetadata', function() {
      // High resolution canvas for better quality
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      
      // Calculate total frames (assuming 30fps if duration is available)
      if (video.duration) {
        // Use fewer frames for better performance
        frameCount = Math.min(100, Math.ceil(video.duration * 30));
      } else {
        frameCount = 100; // Fallback if duration is not available
      }
      
      // Start extracting frames
      extractFrames();
    });
    
    // Extract frames from the video
    function extractFrames() {
      if (isExtracting) return;
      isExtracting = true;
      
      // Show loading state
      ctx.fillStyle = 'black';
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      ctx.fillStyle = 'white';
      ctx.font = '24px Arial';
      ctx.textAlign = 'center';
      ctx.fillText('Loading frames...', canvas.width / 2, canvas.height / 2);
      
      frames = [];
      
      // Set time to beginning
      video.currentTime = 0;
      
      // Function to capture a frame
      const captureFrame = function(frameIndex) {
        return new Promise((resolve) => {
          video.addEventListener('seeked', function onSeeked() {
            // Draw the video frame to the canvas
            ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
            
            // Create an image from the canvas
            const img = new Image();
            img.src = canvas.toDataURL('image/jpeg', 0.75); // Lower quality for better performance
            
            // Add to frames array
            frames.push(img);
            
            video.removeEventListener('seeked', onSeeked);
            resolve();
          }, { once: true });
          
          // Seek to the appropriate time for this frame
          const seekTime = (frameIndex / (frameCount - 1)) * video.duration;
          video.currentTime = seekTime;
        });
      };
      
      // Extract frames sequentially to avoid overwhelming the browser
      async function extractSequentially() {
        for (let i = 0; i < frameCount; i++) {
          await captureFrame(i);
          
          // Update loading progress
          const progress = ((i + 1) / frameCount) * 100;
          ctx.fillStyle = 'black';
          ctx.fillRect(0, 0, canvas.width, canvas.height);
          ctx.fillStyle = 'white';
          ctx.fillText(`Loading: ${Math.round(progress)}%`, canvas.width / 2, canvas.height / 2);
        }
        
        isVideoLoaded = true;
        isExtracting = false;
        
        // Draw the first frame
        if (frames.length > 0) {
          ctx.drawImage(frames[0], 0, 0, canvas.width, canvas.height);
        }
        
        // We don't need the video element anymore
        video.src = '';
      }
      
      extractSequentially();
    }
    
    // Handle scroll events with high precision
    function handleScroll() {
      if (!isVideoLoaded || frames.length === 0) return;
      
      // Calculate scroll progress
      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      const scrollHeight = section.querySelector('.scrub-scrolling__spacer').offsetHeight;
      const scrollProgress = Math.min(Math.max(scrollTop / scrollHeight, 0), 0.999);
      
      // Calculate which frame to show
      const frameIndex = Math.min(Math.floor(scrollProgress * frames.length), frames.length - 1);
      
      // Only update if the frame has changed
      if (frameIndex !== currentFrame) {
        currentFrame = frameIndex;
        ctx.drawImage(frames[currentFrame], 0, 0, canvas.width, canvas.height);
        
        // Update progress bar if it exists
        if (progressBar) {
          progressBar.style.width = `${scrollProgress * 100}%`;
        }
      }
    }
    
    // Use passive event listener for better performance
    window.addEventListener('scroll', handleScroll, { passive: true });
    
    // Also update on resize
    window.addEventListener('resize', handleScroll, { passive: true });
    
    // Initial call to set up first frame
    handleScroll();
    
    // Clean up function
    return function cleanup() {
      window.removeEventListener('scroll', handleScroll);
      window.removeEventListener('resize', handleScroll);
      frames = [];
    };
  });
</script>

{% schema %}
{
  "name": "Scrub Scrolling",
  "settings": [
    {
      "type": "range",
      "id": "scroll_multiplier",
      "label": "Scroll Length Multiplier",
      "min": 1,
      "max": 10,
      "step": 0.5,
      "default": 3,
      "info": "Controls how long the scrolling section will be (higher = longer scroll)"
    },
    {
      "type": "checkbox",
      "id": "show_progress_bar",
      "label": "Show progress bar",
      "default": true
    }
  ],
  "blocks": [
    {
      "name": "Video",
      "type": "video",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "label": "Video URL",
          "id": "video_url"
        },
        {
          "type": "image_picker",
          "label": "Poster Image (loading placeholder)",
          "id": "poster_image",
          "info": "Shown while the video is loading"
        }
      ]
    },
    {
      "name": "Text",
      "type": "text",
      "settings": [
        {
          "type": "range",
          "label": "Padding",
          "id": "padding",
          "min": 40,
          "max": 100,
          "step": 1,
          "default": 40
        },
        {
          "type": "select",
          "label": "Text vertical position",
          "id": "text_vertical",
          "options": [
            {
              "value": "start",
              "label": "Top"
            },
            {
              "value": "center",
              "label": "Center"
            },
            {
              "value": "end",
              "label": "Bottom"
            }
          ]
        },
        {
          "type": "select",
          "label": "Text horizontal position",
          "id": "horizontal_position",
          "options": [
            {
              "value": "start",
              "label": "Left"
            },
            {
              "value": "center",
              "label": "Center"
            },
            {
              "value": "end",
              "label": "Right"
            }
          ]
        },
        {
          "type": "color",
          "label": "Text color",
          "id": "text_color",
          "default": "#020617"
        },
        {
          "type": "text",
          "label": "Title",
          "id": "title"
        },
        {
          "type": "richtext",
          "label": "Text",
          "id": "text"
        },
        {
          "type": "text",
          "label": "Button text",
          "id": "button_text",
          "default": "Read More"
        },
        {
          "type": "url",
          "label": "Button URL",
          "id": "button_url"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Scrub Scrolling"
    }
  ]
}
{% endschema %}