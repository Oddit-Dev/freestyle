{% render 'entry' with '@/styles/sections/scrub-scrolling.scss' %}

<div class="scrub-scrolling">
  {% assign bamboo_icon = settings['bamboo_icon'] | image_url: width: 100 | image_tag: class: 'w-[1.2rem] inline-block translate-y-[-0.2rem] mx-1' %}
  {% assign heart_icon = settings['heart_icon_white'] | image_url: width: 100 | image_tag: class: 'w-[1.6rem] inline-block translate-y-[-0.2rem] mx-[0.1rem]' %}
  {% if section.settings.button_text != blank %}
    <a href="{{ section.settings.button_url }}" target="_blank" class="button m-main">{{ section.settings.button_text | replace: '[bamboo]', bamboo_icon | replace: '[heart_white]', heart_icon }}</a>
  {% endif %}
  {% if section.settings.promo_text != blank %}
    <h3 class="scrub-scrolling__promo font-grotesk text-2xl md:text-5xl">{{ section.settings.promo_text }}</h3>
  {% endif %}
  {% for block in section.blocks %}
    {% case block.type %}
      {% when 'video' %}
        <div class="scrub-scrolling__video">
          <canvas id="scrollCanvas"></canvas>
          {% if block.settings.use_keyframes %}
            <div class="scrub-scrolling__keyframes" style="display: none;">
              {% for i in (1..block.settings.keyframe_count) %}
                <img
                  src="{{ block.settings.keyframe_prefix }}{{ i }}.jpg"
                  data-index="{{ i }}"
                  data-total="{{ block.settings.keyframe_count }}"
                  loading="lazy"
                  alt="Video keyframe {{ i }}">
              {% endfor %}
            </div>
          {% endif %}
        </div>
      {% when 'text' %}
        <style>
          #scrub-scrolling__text-{{ block.id }} {
              padding: {{ block.settings.padding }}px;
              color: {{ block.settings.text_color }};

              {% if block.settings.horizontal_position == 'center' %}
                  text-align: center;
              {% endif %}
          }

          @media (min-width: 768px) {
            #scrub-scrolling__text-{{ block.id }} {
              padding-top: 44rem;
              padding-bottom: 44rem;
            }
          }

          .scrub-scrolling .button span {
            background-image: url({{ section.settings.button_icon | img_url: 'master' }});
          }

          .scrub-scrolling__content .button span {
            background-image: url({{ block.settings.button_icon | img_url: 'master' }});
          }

          @media (max-width: 768px) {
            #scrub-scrolling__text-{{ block.id }} {
              padding: {{ block.settings.padding | divided_by: 2 }}px;
            }
               #scrub-scrolling__text-{{ block.id }} {
              padding-top: 74rem;
              padding-bottom: 74rem;
            }
            .scrub-scrolling__video {
              top: 30%;
            }
          }
        </style>

        <div
          class="scrub-scrolling__text font-grotesk flex items-{{ block.settings.text_vertical }} justify-{{ block.settings.horizontal_position }} font-{{ block.settings.font_weight }}"
          id="scrub-scrolling__text-{{ block.id }}">
          <div class="scrub-scrolling__content">
            <h3 class="font-grotesk text-2xl md:text-5xl font-Inter md:font-medium mb-8">{{ block.settings.title }}</h3>
            <div class="text-lg mb-8">{{ block.settings.text }}</div>
            {% if block.settings.button_text != blank %}
              <a href="{{ section.settings.button_url }}" target="_blank" class="button">{{ block.settings.button_text | replace: '[bamboo]', bamboo_icon | replace: '[heart_white]', heart_icon }}</a>
            {% endif %}
          </div>
        </div>
    {% endcase %}
  {% endfor %}
</div>

<script>
    const canvas = document.getElementById('scrollCanvas');
    const context = canvas.getContext('2d');
    const isMobile = window.innerWidth < 768;
    const totalFrames = 175; 

    const cdnBase = 'https://cdn.shopify.com/s/files/1/0616/2835/0723/files/ezgif-frame-';

    function pad(num, size) {
        let s = "000" + num;
        return s.substr(s.length - size);
    }

    function getFrameUrl(frame) {
        return `${cdnBase}${pad(frame, 3)}.webp?v=1747323262`;
    }

    let currentImage = new Image();
    let isInitialized = false;
    let rafId = null;
    let isVisible = false;

    const imageCache = {};
    let lastFrameIndex = null;
    const preloadRange = 3; 

    
    const pingPongMaxFrame = 114;

    function setCanvasSize() {
        if (window.innerWidth >= 768) {
            canvas.style.width = '50%';
            canvas.style.margin = '0 auto';
            canvas.style.display = 'block';
        } else {
            canvas.style.width = '100%';
            canvas.style.margin = '0';
        }
        canvas.width = window.innerWidth >= 768 ? 1080 : 360;
        canvas.height = window.innerWidth >= 768 ? 1080 : 360;
    }

    setCanvasSize();
    window.addEventListener('resize', setCanvasSize);

    let sectionStart = 0;
    let sectionHeight = 0;

    function initAnimation() {
        const section = document.querySelector('.scrub-scrolling');
        const rect = section.getBoundingClientRect();
        sectionStart = window.pageYOffset + rect.top;
        sectionHeight = rect.height;
        isInitialized = true;
        if (isVisible) {
            startAnimation();
        }
    }

    // Animation: forward 1→195, backward 114→1, repeat
    const forwardFrames = totalFrames; // 1 to 195
    const backwardFrames = 114;        // 114 to 1
    const cycleFrames = forwardFrames + backwardFrames - 1; // -1 because 114 is repeated

    function getCurrentFrame() {
        const scrollTop = window.scrollY;
        const scrollPosition = scrollTop - sectionStart;
        const scrollFraction = Math.min(Math.max(scrollPosition / sectionHeight, 0), 1);
        let frame = Math.floor(scrollFraction * cycleFrames);
        if (frame < forwardFrames) {
            // Forward: 1 → 195
            return frame + 1;
        } else {
            // Backward: 114 → 1
            const retro = frame - forwardFrames;
            return 114 - retro;
        }
    }

    function preloadFrame(frame) {
        if (!imageCache[frame]) {
            const img = new Image();
            img.src = getFrameUrl(frame);
            imageCache[frame] = img;
        }
    }

    function preloadNearbyFrames(current) {
        for (let i = -preloadRange; i <= preloadRange; i++) {
            const frameToPreload = current + i;
            if (frameToPreload >= 1 && frameToPreload <= totalFrames) {
                preloadFrame(frameToPreload);
            }
        }
    }

    function updateFrame() {
        if (!isInitialized || !isVisible) {
            if (rafId) cancelAnimationFrame(rafId);
            return;
        }
        const frameIndex = getCurrentFrame();
        if (frameIndex === lastFrameIndex) {
            rafId = requestAnimationFrame(updateFrame);
            return;
        }
        lastFrameIndex = frameIndex;
        preloadNearbyFrames(frameIndex);
        const frameUrl = getFrameUrl(frameIndex);
        let img = imageCache[frameIndex];
        if (img && img.complete) {
            context.clearRect(0, 0, canvas.width, canvas.height);
            context.drawImage(img, 0, 0, canvas.width, canvas.height);
        } else {
            img = new Image();
            img.onload = () => {
                context.clearRect(0, 0, canvas.width, canvas.height);
                context.drawImage(img, 0, 0, canvas.width, canvas.height);
            };
            img.src = frameUrl;
            imageCache[frameIndex] = img;
        }
        rafId = requestAnimationFrame(updateFrame);
    }

    function startAnimation() {
        if (rafId) cancelAnimationFrame(rafId);
        updateFrame();
    }

    document.addEventListener('DOMContentLoaded', () => {
        initAnimation();
    });

    const observer = new IntersectionObserver(
        (entries) => {
            entries.forEach(entry => {
                isVisible = entry.isIntersecting;
                if (isVisible) {
                    if (!isInitialized) {
                        initAnimation();
                    } else {
                        startAnimation();
                    }
                } else {
                    if (rafId) {
                        cancelAnimationFrame(rafId);
                        rafId = null;
                    }
                    context.clearRect(0, 0, canvas.width, canvas.height);
                }
            });
        },
        {
            threshold: 0.1,
            rootMargin: '200px 0px'
        }
    );

    const section = document.querySelector('.scrub-scrolling');
    if (section) {
        observer.observe(section);
    }
</script>

<style>
  .scrub-scrolling {
    background-color: #DBDAFF !important;
}
</style>

{% schema %}
{
  "name": "Scrub Scrolling",
  "settings": [
    {
      "type": "checkbox",
      "id": "enable_smooth_scroll",
      "label": "Enable smooth scrolling",
      "default": true,
      "info": "Makes the entire page scroll more smoothly"
    },
    {
      "type": "text",
      "label": "Promo Text",
      "id": "promo_text",
      "default": "Your baby is perfect, now their diaper is too."
    },
    {
      "type": "text",
      "label": "Button text",
      "id": "button_text",
      "default": "Read More"
    },
    {
      "type": "url",
      "label": "Button URL",
      "id": "button_url"
    }
  ],
  "blocks": [
    {
      "name": "Video",
      "type": "video",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "label": "Video URL (desktop)",
          "id": "video_url"
        },
        {
          "type": "text",
          "label": "Video URL (mobile)",
          "id": "video_url_mobile"
        },
        {
          "type": "image_picker",
          "label": "Video Sprite Image",
          "id": "video_sprite_image"
        },
        {
          "type": "image_picker",
          "label": "Poster Image (loading placeholder)",
          "id": "poster_image",
          "info": "Shown while the video is loading"
        },
        {
          "type": "checkbox",
          "id": "use_keyframes",
          "label": "Use keyframe images instead of video",
          "default": false,
          "info": "Often provides smoother scrolling on mobile devices"
        },
        {
          "type": "text",
          "id": "keyframe_prefix",
          "label": "Keyframe image URL prefix",
          "info": "Example: '/assets/keyframe-' if your files are named keyframe-1.jpg, keyframe-2.jpg, etc.",
          "default": "/assets/keyframe-"
        },
        {
          "type": "range",
          "id": "keyframe_count",
          "label": "Number of keyframe images",
          "min": 10,
          "max": 60,
          "step": 5,
          "default": 30,
          "info": "More frames = smoother animation but longer loading time"
        }
      ]
    },
    {
      "name": "Text",
      "type": "text",
      "settings": [
        {
          "type": "range",
          "label": "Padding",
          "id": "padding",
          "min": 40,
          "max": 100,
          "step": 1,
          "default": 40
        },
        {
          "type": "select",
          "label": "Text vertical position",
          "id": "text_vertical",
          "options": [
            {
              "value": "start",
              "label": "Top"
            },
            {
              "value": "center",
              "label": "Center"
            },
            {
              "value": "end",
              "label": "Bottom"
            }
          ]
        },
        {
          "type": "select",
          "label": "Text horizontal position",
          "id": "horizontal_position",
          "options": [
            {
              "value": "start",
              "label": "Left"
            },
            {
              "value": "center",
              "label": "Center"
            },
            {
              "value": "end",
              "label": "Right"
            }
          ]
        },
        {
          "type": "color",
          "label": "Text color",
          "id": "text_color",
          "default": "#020617"
        },
        {
          "type": "text",
          "label": "Title",
          "id": "title"
        },
        {
          "type": "richtext",
          "label": "Text",
          "id": "text"
        },
        {
          "type": "text",
          "label": "Button text",
          "id": "button_text",
          "default": "Read More"
        },
        {
          "type": "image_picker",
          "label": "Button Icon",
          "id": "button_icon"
        },
        {
          "type": "url",
          "label": "Button URL",
          "id": "button_url"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Scrub Scrolling"
    }
  ]
}
{% endschema %}
