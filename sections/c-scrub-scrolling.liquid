{% render 'entry' with '@/styles/sections/scrub-scrolling.scss' %}

<div class="scrub-scrolling">
    {% for block in section.blocks %}
        {% case block.type %}
            {% when 'video' %}
                <div class="scrub-scrolling__video">
                    <video 
                        muted 
                        loop 
                        playsinline
                        preload="auto"
                        poster="{{ block.settings.poster_image | img_url: 'master' }}"
                        data-src="{{ block.settings.video_url }}"
                    ></video>
                    <!-- Preloaded keyframes as images for smoother transitions -->
                    <div class="scrub-scrolling__keyframes" style="display: none;">
                        {% if block.settings.use_keyframes %}
                            {% for i in (1..block.settings.keyframe_count) %}
                                <img 
                                    src="{{ block.settings.keyframe_prefix }}{{ i }}.jpg" 
                                    data-index="{{ i }}" 
                                    data-total="{{ block.settings.keyframe_count }}"
                                    alt="Video keyframe {{ i }}"
                                />
                            {% endfor %}
                        {% endif %}
                    </div>
                </div>
            {% when 'text' %}
                <style>
                    #scrub-scrolling__text-{{ block.id }} {
                        padding: {{ block.settings.padding }}px;
                        color: {{ block.settings.text_color }};

                        {% if block.settings.horizontal_position == 'center' %}
                            text-align: center;
                        {% endif %}
                    }

                    @media (max-width: 768px) {
                        #scrub-scrolling__text-{{ block.id }} {
                            padding: {{ block.settings.padding | divided_by: 2 }}px;
                        }
                    }
                </style>

                <div class="scrub-scrolling__text font-grotesk flex items-{{ block.settings.text_vertical }} justify-{{ block.settings.horizontal_position }} font-{{ block.settings.font_weight }}" id="scrub-scrolling__text-{{ block.id }}">
                    <div class="scrub-scrolling__content">
                        <h3 class="font-grotesk text-2xl md:text-5xl font-Inter md:font-medium mb-8">{{ block.settings.title }}</h3>
                        <div class="text-lg mb-8">{{ block.settings.text }}</div>
                        {% if block.settings.button_text != blank %}
                            <a href="{{ block.settings.button_url }}" class="button">{{ block.settings.button_text }}</a>
                        {% endif %}
                    </div>
                </div>
        {% endcase %}
    {% endfor %}
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const section = document.querySelector('.scrub-scrolling');
        const videoContainer = section.querySelector('.scrub-scrolling__video');
        const video = videoContainer.querySelector('video');
        const keyframesContainer = section.querySelector('.scrub-scrolling__keyframes');
        const useKeyframes = keyframesContainer && keyframesContainer.children.length > 0;

        let keyframes = [];
        let isVideoMode = !useKeyframes;
        let currentPercentage = 0;
        let isInView = false;
        let videoLoaded = false;
        let ticking = false;

        let sectionTop = 0;
        let sectionHeight = 0;
        let windowHeight = window.innerHeight;

        function updateMeasurements() {
            const rect = section.getBoundingClientRect();
            sectionTop = rect.top + window.scrollY;
            sectionHeight = section.offsetHeight;
            windowHeight = window.innerHeight;
        }

        function updateScrollPercentage() {
            const scrollY = window.scrollY;
            const start = sectionTop - windowHeight;
            const end = sectionTop + sectionHeight;
            const percentage = (scrollY - start) / (end - start);
            return Math.max(0, Math.min(1, percentage));
        }

        function updateVisuals(percentage) {
            if (isVideoMode) {
                if (videoLoaded && video.duration > 0) {
                    const targetTime = video.duration * percentage;
                    if (Math.abs(video.currentTime - targetTime) > 0.01) {
                        video.currentTime = targetTime;
                    }
                }
            } else if (keyframes.length > 0) {
                const frameIndex = Math.min(
                    Math.floor(percentage * keyframes.length),
                    keyframes.length - 1
                );
                keyframes.forEach((frame, index) => {
                    frame.style.display = index === frameIndex ? 'block' : 'none';
                });
            }
        }

        function onScroll() {
            if (!isInView) return;

            const percentage = updateScrollPercentage();
            if (!ticking) {
                requestAnimationFrame(() => {
                    currentPercentage = percentage;
                    updateVisuals(currentPercentage);
                    ticking = false;
                });
                ticking = true;
            }
        }

        // Set up intersection observer
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                isInView = entry.isIntersecting;

                if (isInView) {
                    updateMeasurements();
                    onScroll();
                    window.addEventListener('scroll', onScroll, { passive: true });
                    window.addEventListener('resize', updateMeasurements);
                } else {
                    window.removeEventListener('scroll', onScroll);
                    window.removeEventListener('resize', updateMeasurements);
                }
            });
        }, { threshold: 0.1 });

        observer.observe(section);

        // Keyframe setup
        if (useKeyframes) {
            keyframes = Array.from(keyframesContainer.querySelectorAll('img')).sort((a, b) => {
                return parseInt(a.dataset.index) - parseInt(b.dataset.index);
            });
            video.style.opacity = 0;
            keyframes.forEach(img => {
                const image = new Image();
                image.src = img.src;
            });
        } else {
            const isMobile = window.innerWidth <= 768;
            const videoSrc = isMobile ? video.dataset.urlMobile : video.dataset.urlDesktop;

            if (videoSrc) {
                video.src = videoSrc;

                video.addEventListener('loadedmetadata', function () {
                    videoLoaded = true;
                    video.currentTime = 0;
                });

                video.addEventListener('error', function () {
                    console.error('Error loading video.');
                });
            }
        }

        // Optional smooth scroll setting
        if ({{ section.settings.enable_smooth_scroll | default: true }}) {
            document.documentElement.style.scrollBehavior = 'smooth';
        }

        // Cleanup
        return function cleanup() {
            observer.disconnect();
            window.removeEventListener('scroll', onScroll);
            window.removeEventListener('resize', updateMeasurements);
        };
    });
</script>


{% schema %}
{
  "name": "Scrub Scrolling",
  "settings": [
    {
      "type": "checkbox",
      "id": "enable_smooth_scroll",
      "label": "Enable smooth scrolling",
      "default": true,
      "info": "Makes the entire page scroll more smoothly"
    }
  ],
  "blocks": [
    {
      "name": "Video",
      "type": "video",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "label": "Video URL",
          "id": "video_url"
        },
        {
          "type": "image_picker",
          "label": "Poster Image (loading placeholder)",
          "id": "poster_image",
          "info": "Shown while the video is loading"
        },
        {
          "type": "checkbox",
          "id": "use_keyframes",
          "label": "Use keyframe images instead of video",
          "default": false,
          "info": "Often provides smoother scrolling on mobile devices"
        },
        {
          "type": "text",
          "id": "keyframe_prefix",
          "label": "Keyframe image URL prefix",
          "info": "Example: '/assets/keyframe-' if your files are named keyframe-1.jpg, keyframe-2.jpg, etc.",
          "default": "/assets/keyframe-"
        },
        {
          "type": "range",
          "id": "keyframe_count",
          "label": "Number of keyframe images",
          "min": 10,
          "max": 60,
          "step": 5,
          "default": 30,
          "info": "More frames = smoother animation but longer loading time"
        }
      ]
    },
    {
      "name": "Text",
      "type": "text",
      "settings": [
        {
            "type": "range",
            "label": "Padding",
            "id": "padding",
            "min": 40,
            "max": 100,
            "step": 1,
            "default": 40
        },
        {
            "type": "select",
            "label": "Text vertical position",
            "id": "text_vertical",
            "options": [
                {
                    "value": "start",
                    "label": "Top"
                },
                {
                    "value": "center",
                    "label": "Center"
                },
                {
                    "value": "end",
                    "label": "Bottom"
                }
            ]
        },
        {
            "type": "select",
            "label": "Text horizontal position",
            "id": "horizontal_position",
            "options": [
                {
                    "value": "start",
                    "label": "Left"
                },
                {
                    "value": "center",
                    "label": "Center"
                },
                {
                    "value": "end",
                    "label": "Right"
                }
            ]
        },
        {
            "type": "color",
            "label": "Text color",
            "id": "text_color",
            "default": "#020617"
        },
        {
            "type": "text",
            "label": "Title",
            "id": "title"
        },
        {
            "type": "richtext",
            "label": "Text",
            "id": "text"
        },
        {
            "type": "text",
            "label": "Button text",
            "id": "button_text",
            "default": "Read More"
        },
        {
            "type": "url",
            "label": "Button URL",
            "id": "button_url"
        }
    ]
    }
  ],
  "presets": [
    {
      "name": "Scrub Scrolling"
    }
  ]
}
{% endschema %}